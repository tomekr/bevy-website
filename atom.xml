<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Bevy Engine</title>
	<link href="https://bevyengine.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://bevyengine.org"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-12-19T00:00:00+00:00</updated>
	<id>https://bevyengine.org/atom.xml</id>
	<entry xml:lang="en">
		<title>Bevy 0.4</title>
		<published>2020-12-19T00:00:00+00:00</published>
		<updated>2020-12-19T00:00:00+00:00</updated>
		<link href="https://bevyengine.org/news/bevy-0-4/" type="text/html"/>
		<id>https://bevyengine.org/news/bevy-0-4/</id>
		<content type="html">&lt;p&gt;A little over a month after releasing Bevy 0.3, and thanks to &lt;strong&gt;66&lt;&#x2F;strong&gt; contributors, &lt;strong&gt;178&lt;&#x2F;strong&gt; pull requests, and our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;cart&quot;&gt;&lt;strong&gt;generous sponsors&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, I&#x27;m happy to announce the &lt;strong&gt;Bevy 0.4&lt;&#x2F;strong&gt; release on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bevy&quot;&gt;crates.io&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;For those who don&#x27;t know, Bevy is a refreshingly simple data-driven game engine built in Rust. You can check out &lt;a href=&quot;&#x2F;learn&#x2F;book&#x2F;getting-started&#x2F;&quot;&gt;Quick Start Guide&lt;&#x2F;a&gt; to get started. Bevy is also free and open source forever! You can grab the full &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&quot;&gt;source code&lt;&#x2F;a&gt; on GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the highlights from this release:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;wasm-webgl2&quot;&gt;WASM + WebGL2&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @mrk-its&lt;&#x2F;div&gt;
&lt;p&gt;Bevy now has a WebGL2 render backend! @mrk-its has been hard at work building the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mrk-its&#x2F;bevy_webgl2&quot;&gt;Bevy WebGL2 Plugin&lt;&#x2F;a&gt; and expanding &lt;code&gt;bevy_render&lt;&#x2F;code&gt; to meet the needs of the web. He also put together a nice website showcasing various Bevy examples and games running on the web. &lt;&#x2F;p&gt;
&lt;p&gt;I think the results speak for themselves:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bevy-webgl2-showcase&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mrk.sed.pl&#x2F;bevy-showcase&#x2F;&quot;&gt;Bevy WebGL2 Showcase&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mrk.sed.pl&#x2F;bevy-showcase&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;webgl_showcase.png&quot; alt=&quot;webgl2 showcase&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cross-platform-main-function&quot;&gt;Cross Platform Main Function&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;p&gt;On most supported Bevy platforms you can just use normal main functions (ex: Windows, MacOS, Linux, and Web). Here is the smallest possible Bevy app that runs on those platforms:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;bevy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However some platforms (currently Android and iOS) require additional boilerplate. This arcane magic is error prone, takes up space, and isn&#x27;t particularly nice to look at. Up until this point, Bevy users had to supply their own boilerplate ... but no more! &lt;strong&gt;Bevy 0.4&lt;&#x2F;strong&gt; adds a new &lt;code&gt;#[bevy_main]&lt;&#x2F;code&gt; proc-macro, which inserts the relevant boilerplate for you. This is a big step toward our &amp;quot;write once run anywhere&amp;quot; goal.&lt;&#x2F;p&gt;
&lt;p&gt;This Bevy App has all the code required to run on Windows, MacOS, Linux, Android, iOS, and Web:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;bevy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::*;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;bevy_main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;live-shader-reloading&quot;&gt;Live Shader Reloading&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @yrns&lt;&#x2F;div&gt;
&lt;p&gt;Bevy can now update changes to shaders at runtime, giving you instant feedback without restarting your app. This video isn&#x27;t sped up!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;hot_shader_reloading.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ecs-improvements&quot;&gt;ECS Improvements&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;p&gt;It wouldn&#x27;t be a Bevy update without another round of ECS improvements!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flexible-ecs-parameters&quot;&gt;Flexible ECS Parameters&lt;&#x2F;h3&gt;
&lt;p&gt;Prior versions of Bevy forced you to provide system parameters in a specific order:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F;&#x2F; This system followed the [Commands][Resources][Queries] order and compiled as expected
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;valid_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F;&#x2F; This system did not follow the required ordering, which caused compilation to fail
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;invalid_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Newbies would fall prey to this constantly. These completely arbitrary constraints were a quirk of the internal implementation. The &lt;code&gt;IntoSystem&lt;&#x2F;code&gt; trait was only implemented for specific orders. Supporting every order would have exponentially affected compile times. The internal implementation was also constructed with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;9afe196f1690a6a6e47bf67ac740b4edeffd97bd&#x2F;crates&#x2F;bevy_ecs&#x2F;src&#x2F;system&#x2F;into_system.rs#L158&quot;&gt;famously complicated macro&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To resolve this, I completely rewrote how we generate systems. We now use a &lt;code&gt;SystemParam&lt;&#x2F;code&gt; trait, which we implement for each parameter type. This has a number of benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Significantly Faster Compile Times&lt;&#x2F;strong&gt;: We&#x27;re seeing a &lt;b style=&quot;color: rgb(50, 210, 50)&quot;&gt;~25%&lt;&#x2F;b&gt; decrease in clean compile times&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Use Any Parameter Order You Want&lt;&#x2F;strong&gt;: No more arbitrary order restrictions!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Easily Add New Parameters&lt;&#x2F;strong&gt;: It is now easy for us (and for users) to create new parameters. Just implement the &lt;code&gt;SystemParam&lt;&#x2F;code&gt; trait!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Simpler Implementation&lt;&#x2F;strong&gt;: The new implementation is much smaller and also way easier to maintain and understand.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; In Bevy 0.4 this system is now perfectly valid. Cool!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that in &lt;strong&gt;Bevy 0.4&lt;&#x2F;strong&gt;, commands now look like &lt;code&gt;commands: &amp;amp;mut Commands&lt;&#x2F;code&gt; instead of &lt;code&gt;mut commands: Commands&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;simplified-query-filters&quot;&gt;Simplified Query Filters&lt;&#x2F;h3&gt;
&lt;p&gt;Up until now, Bevy&#x27;s Query filters were intermingled with components:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;With&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;A, Without&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;B, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform, Changed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;)&amp;gt;&amp;gt;&amp;gt;) {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Confused? You wouldn&#x27;t be the first! You can interpret the query above as &amp;quot;give me immutable references to the &lt;code&gt;Transform&lt;&#x2F;code&gt; and &lt;code&gt;Velocity&lt;&#x2F;code&gt; components of all entities that have the &lt;code&gt;A&lt;&#x2F;code&gt; component, &lt;em&gt;do not&lt;&#x2F;em&gt; have the &lt;code&gt;B&lt;&#x2F;code&gt; component, and have a changed Velocity component&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;First, the nesting of types via With &#x2F; Without makes it very unclear whats going on. Additionally, it&#x27;s hard to tell what the &lt;code&gt;Changed&amp;lt;Velocity&amp;gt;&lt;&#x2F;code&gt; parameter does. Is it just a filter? Does it also return a Velocity component? If so, is it immutable or mutable?&lt;&#x2F;p&gt;
&lt;p&gt;It made sense to break up these concepts. In &lt;strong&gt;Bevy 0.4&lt;&#x2F;strong&gt;, Query filters are separate from Query components. The query above looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Query with filters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;With&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, Without&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, Changed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;)&amp;gt;) {
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Query without filters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&amp;gt;) {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes it much easier to tell what a Query is doing at a glance. It also makes for more composable behaviors. For example, you can now filter on &lt;code&gt;Changed&amp;lt;Velocity&amp;gt;&lt;&#x2F;code&gt; without actually retrieving the &lt;code&gt;Velocity&lt;&#x2F;code&gt; component.&lt;&#x2F;p&gt;
&lt;p&gt;And now that filters are a separate type, you can create type aliases for filters that you want to re-use:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ChangedVelocity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;With&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Without&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Changed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, ChangedVelocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;system-inputs-outputs-and-chaining&quot;&gt;System Inputs, Outputs, and Chaining&lt;&#x2F;h3&gt;
&lt;p&gt;Systems can now have inputs and outputs. This opens up a variety of interesting behaviors, such as system error handling:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;error_handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()))
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;result_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;()&amp;gt; {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; transform &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SOME_ENTITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)?;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;found entity transform: {:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(())
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;error_handler_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;In&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;: In&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;()&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;error_handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyErrorHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;      error_handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handle_error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.4.0&amp;#x2F;bevy_ecs&#x2F;trait.System.html&quot;&gt;&lt;code&gt;System&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; trait now looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Has no inputs and no outputs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;In = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, Out = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Takes a usize as input and return a f32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;In = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, Out = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use this feature in our new Schedule implementation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;schedule-v2&quot;&gt;Schedule V2&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy&#x27;s old Schedule was nice. System registrations were easy to read and easy to compose. But it also had significant limitations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Only one Schedule allowed&lt;&#x2F;li&gt;
&lt;li&gt;Very static: you were limited to using the tools we gave you:
&lt;ul&gt;
&lt;li&gt;stages are just lists of systems&lt;&#x2F;li&gt;
&lt;li&gt;stages are added to schedules&lt;&#x2F;li&gt;
&lt;li&gt;stages use hard-coded system runners&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Couldn&#x27;t switch between schedules at runtime&lt;&#x2F;li&gt;
&lt;li&gt;Couldn&#x27;t easily support &amp;quot;fixed timestep&amp;quot; scenarios&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To solve these problems, I wrote a new Schedule system from scratch. Before you get worried, these are largely &lt;em&gt;non-breaking&lt;&#x2F;em&gt; changes. The high level &amp;quot;app builder&amp;quot; syntax you know and love is still available:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;my_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;stage-trait&quot;&gt;Stage Trait&lt;&#x2F;h4&gt;
&lt;p&gt;Stages are now a trait. You can now implement your own &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.4.0&amp;#x2F;bevy_ecs&#x2F;trait.Stage.html&quot;&gt;&lt;code&gt;Stage&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; types!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Stage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyStage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; World, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Do stage stuff here.
        &#x2F;&#x2F; You have unique access to the World and Resources, so you are free to do anything
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;stage-type-systemstage&quot;&gt;Stage Type: &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.4.0&amp;#x2F;bevy_ecs&#x2F;struct.SystemStage.html&quot;&gt;&lt;code&gt;SystemStage&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is basically a &amp;quot;normal&amp;quot; stage. You can add systems to it and you can decide how those systems will be executed (parallel, serial, or custom logic)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; runs systems in parallel (using the default parallel executor)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; parallel_stage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SystemStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;parallel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; runs systems serially (in registration order)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; serial_stage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SystemStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;serial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; you can also write your own custom SystemStageExecutor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; custom_executor_stage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SystemStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyCustomExecutor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;stage-type-schedule&quot;&gt;Stage Type: &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.4.0&amp;#x2F;bevy_ecs&#x2F;struct.Schedule.html&quot;&gt;&lt;code&gt;Schedule&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You read that right! &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.4.0&amp;#x2F;bevy_ecs&#x2F;struct.Schedule.html&quot;&gt;&lt;code&gt;Schedule&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; now implements the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.4.0&amp;#x2F;bevy_ecs&#x2F;trait.Stage.html&quot;&gt;&lt;code&gt;Stage&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; trait, which means you can nest Schedules within other schedules:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; schedule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Schedule&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SystemStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;parallel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    )
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;nested&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Schedule&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;nested_stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SystemStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;serial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        )
    );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;run-criteria&quot;&gt;Run Criteria&lt;&#x2F;h4&gt;
&lt;p&gt;You can add &amp;quot;run criteria&amp;quot; to any &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.4.0&amp;#x2F;bevy_ecs&#x2F;struct.SystemStage.html&quot;&gt;&lt;code&gt;SystemStage&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.4.0&amp;#x2F;bevy_ecs&#x2F;struct.Schedule.html&quot;&gt;&lt;code&gt;Schedule&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; A &amp;quot;run criteria&amp;quot; is just a system that returns a `ShouldRun` result
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;only_on_10_criteria&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) -&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; ShouldRun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{ 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ShouldRun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Yes 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{ 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ShouldRun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;No
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this stage only runs when Res&amp;lt;usize&amp;gt; has a value of 10
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_stage_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;only_on_10_stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SystemStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;parallel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_run_criteria&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;only_on_10_criteria&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;my_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    )
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this stage only runs once
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_stage_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RUN_ONCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;one_and_done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Schedule&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_run_criteria&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RunOnce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;my_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;fixed-timestep&quot;&gt;Fixed Timestep&lt;&#x2F;h4&gt;
&lt;p&gt;You can now run stages on a &amp;quot;fixed timestep&amp;quot;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this stage will run once every 0.4 seconds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_stage_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;fixed_update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SystemStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;parallel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_run_criteria&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;FixedTimestep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;my_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This builds on top of &lt;code&gt;ShouldRun::YesAndLoop&lt;&#x2F;code&gt;, which ensures that the schedule continues to loop until it has consumed all accumulated time.&lt;&#x2F;p&gt;
&lt;p&gt;Check out the excellent &lt;a href=&quot;https:&#x2F;&#x2F;gafferongames.com&#x2F;post&#x2F;fix_your_timestep&#x2F;&quot;&gt;&amp;quot;Fix Your Timestep!&amp;quot;&lt;&#x2F;a&gt; article if you want to learn more about fixed timesteps.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;typed-stage-builders&quot;&gt;Typed Stage Builders&lt;&#x2F;h4&gt;
&lt;p&gt;Now that stages can be any type, we need a way for &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_app&amp;#x2F;0.4.0&amp;#x2F;bevy_app&#x2F;trait.Plugin.html&quot;&gt;&lt;code&gt;Plugins&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; to interact with arbitrary stage types:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this &amp;quot;high level&amp;quot; builder pattern still works (and assumes that the stage is a SystemStage)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;some_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this &amp;quot;low level&amp;quot; builder is equivalent to add_system()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; SystemStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;|
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;some_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    )
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this works for custom stage types too
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MY_CUSTOM_STAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; MyCustomStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;|
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;do_custom_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;deprecated-for-each-systems&quot;&gt;Deprecated For-Each Systems&lt;&#x2F;h3&gt;
&lt;p&gt;Prior versions of Bevy supported &amp;quot;for-each&amp;quot; systems, which looked like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; on each update this system runs once for each entity with a Transform component
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Entity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do per-entity logic here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From now on, the system above should be written like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; on each update this system runs once and internally iterates over each entity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Entity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do per-entity logic here
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For-each systems were nice to look at and sometimes saved some typing. Why remove them?&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;For-each systems were fundamentally limited in a number of ways. They couldn&#x27;t iterate removed components, filter, control iteration, or use multiple queries at the same time. This meant they needed to be converted to &amp;quot;query systems&amp;quot; as soon as those features were needed.&lt;&#x2F;li&gt;
&lt;li&gt;Bevy should generally have &amp;quot;one way to do things&amp;quot;. For-each systems were a slightly more ergonomic way to define a small subset of system types. This forced people to make a &amp;quot;design decision&amp;quot; when they shouldn&#x27;t need to. It also made examples and tutorials inconsistent according to people&#x27;s preferences for one or the other.&lt;&#x2F;li&gt;
&lt;li&gt;There were a number of &amp;quot;gotchas&amp;quot; for newcomers that constantly come up in our support forums and confused newbies:
&lt;ul&gt;
&lt;li&gt;users expect &lt;code&gt;&amp;amp;mut T&lt;&#x2F;code&gt; queries to work in foreach systems (ex: &lt;code&gt;fn system(a: &amp;amp;mut A) {}&lt;&#x2F;code&gt;). These can&#x27;t work because we require &lt;code&gt;Mut&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; tracking pointers to ensure change tracking always works as expected. The equivalent &lt;code&gt;Query&amp;lt;&amp;amp;mut A&amp;gt;&lt;&#x2F;code&gt; works because we can return the tracking pointer when iterating the Query.&lt;&#x2F;li&gt;
&lt;li&gt;A &amp;quot;run this for-each system on some criteria&amp;quot; bug that was common enough that we had to cover it in the Bevy Book.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;They increased compile times. Removing for-each systems saved me about ~5 seconds on clean Bevy compiles)&lt;&#x2F;li&gt;
&lt;li&gt;Their internal implementation required a complicated macro. This affected maintainability.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;states&quot;&gt;States&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;p&gt;By popular demand, Bevy now supports States. These are logical &amp;quot;app states&amp;quot; that allow you to enable&#x2F;disable systems according to the state your app is in.&lt;&#x2F;p&gt;
&lt;p&gt;States are defined as normal Rust enums:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    Loading&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    Menu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    InGame
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You then add them to your app as a resource like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; add a new AppState resource that defaults to the Loading state
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Loading&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To run systems according to the current state, add a &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.4.0&amp;#x2F;bevy_ecs&#x2F;struct.StateStage.html&quot;&gt;&lt;code&gt;StateStage&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_stage_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;STAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;StateStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can then add systems for each state value &#x2F; lifecycle-event like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;on_state_enter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;STAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Menu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; setup_menu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;on_state_update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;STAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Menu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; menu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;on_state_exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;STAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Menu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; cleanup_menu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;on_state_enter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;STAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;InGame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; setup_game&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;on_state_update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;STAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;InGame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; movement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that there are different &amp;quot;lifecycle events&amp;quot;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;on_enter&lt;&#x2F;strong&gt;: Runs once when first entering a state&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;on_exit&lt;&#x2F;strong&gt;: Runs once when exiting a state&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;on_update&lt;&#x2F;strong&gt;: Runs exactly once on every run of the stage (after any on_enter or on_exit events have been run)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can queue a state change from a system like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;set_next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AppState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;InGame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Queued state changes get applied at the end of the StateStage. If you change state within a StateStage, the lifecycle events will occur in the same update&#x2F;frame. You can do this any number of times (aka it will continue running state lifecycle systems until no more changes are queued). This ensures that multiple state changes can be applied within the same frame.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gltf-improvements&quot;&gt;GLTF Improvements&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @iwikal, @FuriouZz, @rod-salazar&lt;&#x2F;div&gt;
&lt;p&gt;Bevy&#x27;s GLTF loader now imports Cameras. Here is a simple scene setup in Blender:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;gltf_camera_blender.png&quot; alt=&quot;gltf_camera_blender&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And here is how it looks in Bevy (the lighting is different because we don&#x27;t import lights yet):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;gltf_camera_bevy.png&quot; alt=&quot;gltf_camera_bevy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There were also a number of other improvements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pixel format conversion while importing images from a GLTF&lt;&#x2F;li&gt;
&lt;li&gt;Default material loading&lt;&#x2F;li&gt;
&lt;li&gt;Hierarchy fixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;spawn-scenes-as-children&quot;&gt;Spawn Scenes as Children&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @mockersf&lt;&#x2F;div&gt;
&lt;p&gt;Scenes can now be spawned as children like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_translation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;GlobalTransform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),
    ))
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn_scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;scene.gltf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;));
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By spawning beneath a parent, this enables you to do things like translate&#x2F;rotate&#x2F;scale multiple instances of the same scene:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;scene_children.png&quot; alt=&quot;scene_children&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dynamic-linking&quot;&gt;Dynamic Linking&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @bjorn3, @cart&lt;&#x2F;div&gt;
&lt;p&gt;@bjorn3 discovered that you can force Bevy to dynamically link.&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;em&gt;significantly&lt;&#x2F;em&gt; reduces iterative compile times. Check out how long it takes to compile a change made to the &lt;code&gt;3d_scene.rs&lt;&#x2F;code&gt; example with the &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;learn&#x2F;book&#x2F;getting-started&#x2F;setup&#x2F;&quot;&gt;Fast Compiles Config&lt;&#x2F;a&gt; &lt;em&gt;and&lt;&#x2F;em&gt; dynamic linking:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;dynamic_fast.png&quot; alt=&quot;fast dynamic&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;time-to-compile-change-to-3d-scene-example-in-seconds-less-is-better&quot;&gt;Time To Compile Change To 3d_scene Example (in seconds, less is better)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;fast_compiles.svg&quot; alt=&quot;fast_compiles&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We added a cargo feature to easily enable dynamic linking during development&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;# for a bevy app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt; bevy&#x2F;dynamic

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;# for bevy examples
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt; dynamic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt; breakout
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just keep in mind that you should disable the feature when publishing your game.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;text-layout-improvements&quot;&gt;Text Layout Improvements&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @AlisCode, @tigregalis&lt;&#x2F;div&gt;
&lt;p&gt;Prior Bevy releases used a custom, naive text layout system. It had a number of bugs and limitations, such as the infamous &amp;quot;wavy text&amp;quot; bug:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;wavy_text.png&quot; alt=&quot;wavy_text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The new text layout system uses glyph_brush_layout, which fixes the layout bugs and adds a number of new layout options. Note that the &amp;quot;Fira Sans&amp;quot; font used in the example has some stylistic &amp;quot;waviness&amp;quot; ... this isn&#x27;t a bug:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;text_layout.png&quot; alt=&quot;text_layout&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;renderer-optimization&quot;&gt;Renderer Optimization&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;p&gt;Bevy&#x27;s render api was built to be easy to use and extend. I wanted to nail down a good api first, but that resulted in a number of performance TODOs that caused some pretty serious overhead.&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;strong&gt;Bevy 0.4&lt;&#x2F;strong&gt; I decided to resolve as many of those TODOs as I could. There is still plenty more to do (like instancing and batching), but Bevy already performs &lt;em&gt;much&lt;&#x2F;em&gt; better than it did before.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;incrementalize-everything&quot;&gt;Incrementalize Everything&lt;&#x2F;h3&gt;
&lt;p&gt;Most of Bevy&#x27;s high level render abstractions were designed to be incrementally updated, but when I was first building the engine, ECS change detection wasn&#x27;t implemented. Now that we have all of these nice optimization tools, it makes sense to use them!&lt;&#x2F;p&gt;
&lt;p&gt;For the first optimization round, I incrementalized as much as I could:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Added change detection to RenderResourceNode, Sprites, and Transforms, which improved performance when those values don&#x27;t change&lt;&#x2F;li&gt;
&lt;li&gt;Only sync asset gpu data when the asset changes&lt;&#x2F;li&gt;
&lt;li&gt;Share asset RenderResourceBindings across all entities that reference an asset&lt;&#x2F;li&gt;
&lt;li&gt;Mesh provider system now only updates mesh specialization when it needs to&lt;&#x2F;li&gt;
&lt;li&gt;Stop clearing bind groups every frame and remove stale bind groups every other frame&lt;&#x2F;li&gt;
&lt;li&gt;Cache unmatched render resource binding results (which prevents redundant computations per-entity per-frame)&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t send render pass state change commands when the state has not actually changed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;frame-time-to-draw-10-000-static-sprites-in-milliseconds-less-is-better&quot;&gt;Frame Time to Draw 10,000 Static Sprites (in milliseconds, less is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;bevy_round1_static.svg&quot; alt=&quot;bevy_round1_static&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;frame-time-to-draw-10-000-moving-sprites-in-milliseconds-less-is-better&quot;&gt;Frame Time to Draw 10,000 Moving Sprites (in milliseconds, less is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;bevy_round1_dynamic.svg&quot; alt=&quot;bevy_round1_dynamic&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optimize-text-rendering-and-other-immediate-rendering&quot;&gt;Optimize Text Rendering (and other immediate rendering)&lt;&#x2F;h3&gt;
&lt;p&gt;Text Rendering (and anything else that used the &lt;code&gt;SharedBuffers&lt;&#x2F;code&gt; immediate-rendering abstraction) was &lt;em&gt;extremely&lt;&#x2F;em&gt; slow in prior Bevy releases. This was because the &lt;code&gt;SharedBuffers&lt;&#x2F;code&gt; abstraction was a placeholder implementation that didn&#x27;t actually share buffers. By implementing the &amp;quot;real&amp;quot; &lt;code&gt;SharedBuffers&lt;&#x2F;code&gt; abstraction, we got a pretty significant text rendering speed boost.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;frame-time-to-draw-text-debug-example-in-milliseconds-less-is-better&quot;&gt;Frame Time to Draw &amp;quot;text_debug&amp;quot; Example  (in milliseconds, less is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;text_rendering.svg&quot; alt=&quot;text_rendering&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mailbox-vsync&quot;&gt;Mailbox Vsync&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy now uses wgpu&#x27;s &amp;quot;mailbox vsync&amp;quot; by default. This reduces input latency on platforms that support it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reflection&quot;&gt;Reflection&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;p&gt;Rust has a pretty big &amp;quot;reflection&amp;quot; gap. For those who aren&#x27;t aware, &amp;quot;reflection&amp;quot; is a class of language feature that enables you to interact with language constructs at runtime. They add a form of &amp;quot;dynamic-ness&amp;quot; to what are traditionally static language concepts. &lt;&#x2F;p&gt;
&lt;p&gt;We have bits and pieces of reflection in Rust, such as &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;doc.rust-lang.org&#x2F;stable&amp;#x2F;std&amp;#x2F;any&#x2F;struct.TypeId.html&quot;&gt;&lt;code&gt;std::any::TypeId&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;doc.rust-lang.org&#x2F;stable&amp;#x2F;std&amp;#x2F;any&#x2F;fn.type_name.html&quot;&gt;&lt;code&gt;std::any::type_name&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;. But when it comes to interacting with datatypes ... we don&#x27;t have anything yet. This is unfortunate because some problems are inherently dynamic in nature.&lt;&#x2F;p&gt;
&lt;p&gt;When I was first building Bevy, I decided that the engine would benefit from such features. Reflection is a good foundation for scene systems, Godot-like (or Unity-like) property animation systems, and editor inspection tools. I built the &lt;code&gt;bevy_property&lt;&#x2F;code&gt; and &lt;code&gt;bevy_type_registry&lt;&#x2F;code&gt; crates to fill these needs.&lt;&#x2F;p&gt;
&lt;p&gt;They got the job done, but they were custom-tailored to Bevy&#x27;s needs, were full of custom jargon (rather than reflecting Rust language constructs directly), didn&#x27;t handle traits, and had a number of fundamental restrictions on how data could be accessed. &lt;&#x2F;p&gt;
&lt;p&gt;In this release we replaced the old &lt;code&gt;bevy_property&lt;&#x2F;code&gt; and &lt;code&gt;bevy_type_registry&lt;&#x2F;code&gt; crates with a new &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_reflect&amp;#x2F;0.4.0&amp;#x2F;bevy_reflect&#x2F;index.html&quot;&gt;&lt;code&gt;bevy_reflect&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate. Bevy Reflect is intended to be a &amp;quot;generic&amp;quot; Rust reflection crate. I&#x27;m hoping it will be as useful for non-Bevy projects as it is for Bevy. We now use it for our Scene system, but in the future we will use it for animating Component fields and auto-generating Bevy Editor inspector widgets.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy Reflect enables you to dynamically interact with Rust types by deriving the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_reflect&amp;#x2F;0.4.0&amp;#x2F;bevy_reflect&#x2F;trait.Reflect.html&quot;&gt;&lt;code&gt;Reflect&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; trait:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Reflect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;,
    b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;,
    c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Reflect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; I&amp;#39;ll use this value to illustrate `bevy_reflect` features
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot; }]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;interact-with-fields-using-their-names&quot;&gt;Interact with Fields Using Their Names&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;get_field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;get_field_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;patch-your-types-with-new-values&quot;&gt;Patch Your Types With New Values&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; dynamic_struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;DynamicStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dynamic_struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dynamic_struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dynamic_struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;look-up-nested-fields-using-path-strings&quot;&gt;Look Up Nested Fields Using &amp;quot;Path Strings&amp;quot;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;get_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;b[0].value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;iterate-over-struct-fields&quot;&gt;Iterate Over Struct Fields&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Reflect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter_fields&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; field_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;name_at&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;downcast_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;{} is a u32 with the value: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; field_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    } 
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;automatically-serialize-and-deserialize-with-serde&quot;&gt;Automatically Serialize And Deserialize With Serde&lt;&#x2F;h3&gt;
&lt;p&gt;This doesn&#x27;t require manual Serde impls!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; registry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;TypeRegistry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; serializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ReflectSerializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; serialized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ron&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;to_string_pretty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;serializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ron&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PrettyConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; deserializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ron&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;de&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Deserializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;serialized&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; reflect_deserializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ReflectDeserializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; reflect_deserializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;deserialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; deserializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; dynamic_struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;DynamicStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F;&#x2F; reflect has its own partal_eq impl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;reflect_partial_eq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dynamic_struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;trait-reflection&quot;&gt;Trait Reflection&lt;&#x2F;h3&gt;
&lt;p&gt;You can now call a trait on a given &lt;code&gt;&amp;amp;dyn Reflect&lt;&#x2F;code&gt; reference without knowing the underlying type! This is a form of magic that should probably be avoided in most situations. But in the few cases where it is completely necessary, it is very useful:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Reflect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;DoThing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;DoThing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;do_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) -&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;{} World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
    }
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reflect_trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;DoThing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;do_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) -&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; First, lets box our type as a Box&amp;lt;dyn Reflect&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; reflect_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dyn Reflect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;* 
This means we no longer have direct access to MyType or it methods. We can only call Reflect methods on reflect_value. What if we want to call `do_thing` on our type? We could downcast using reflect_value.get::&amp;lt;MyType&amp;gt;(), but what if we don&amp;#39;t know the type at compile time?
*&#x2F;

&#x2F;&#x2F; Normally in rust we would be out of luck at this point. Lets use our new reflection powers to do something cool!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; type_registry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;TypeRegistry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;type_registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;*
The #[reflect] attribute we put on our DoThing trait generated a new `ReflectDoThing` struct, which implements TypeData. This was added to MyType&amp;#39;s TypeRegistration.
*&#x2F;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; reflect_do_thing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; type_registry
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;get_type_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ReflectDoThing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reflect_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;type_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; We can use this generated type to convert our `&amp;amp;dyn Reflect` reference to an `&amp;amp;dyn DoThing` reference
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; my_trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dyn DoThing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; reflect_do_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reflect_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Which means we can now call do_thing(). Magic!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; my_trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;do_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;3d-texture-assets&quot;&gt;3D Texture Assets&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @bonsairobo&lt;&#x2F;div&gt;
&lt;p&gt;The Texture asset now has support for 3D textures. The new &lt;code&gt;array_texture.rs&lt;&#x2F;code&gt; example illustrates how to load a 3d texture and sample from each &amp;quot;layer&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;array_texture.png&quot; alt=&quot;array_texture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;logging-and-profiling&quot;&gt;Logging and Profiling&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @superdump, @cart&lt;&#x2F;div&gt;
&lt;p&gt;Bevy finally has built in logging, which is now enabled by default via the new &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_log&amp;#x2F;0.4.0&amp;#x2F;bevy_log&#x2F;struct.LogPlugin.html&quot;&gt;&lt;code&gt;LogPlugin&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;. We evaluated various logging libraries and eventually landed on the new &lt;code&gt;tracing&lt;&#x2F;code&gt; crate. &lt;code&gt;tracing&lt;&#x2F;code&gt; is a structured logger that handles async &#x2F; parallel logging well (perfect for an engine like Bevy), and enables profiling in addition to &amp;quot;normal&amp;quot; logging.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_log&amp;#x2F;0.4.0&amp;#x2F;bevy_log&#x2F;struct.LogPlugin.html&quot;&gt;&lt;code&gt;LogPlugin&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; configures each platform to log to the appropriate backend by default: the terminal on desktop, the console on web, and Android Logs &#x2F; logcat on Android. We built a new Android &lt;code&gt;tracing&lt;&#x2F;code&gt; backend because one didn&#x27;t exist yet.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;logging&quot;&gt;Logging&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy&#x27;s internal plugins now generate &lt;code&gt;tracing&lt;&#x2F;code&gt; logs. And you can easily add logs to your own app logic like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; these are imported by default in bevy::prelude::*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;trace!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;very noisy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;debug!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;helpful for debugging&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;info!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;helpful information that is worth printing by default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;warn!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;something bad happened that isn&amp;#39;t a failure, but thats worth calling out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;error!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;something failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These lines result in pretty-printed terminal logs:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;logs.png&quot; alt=&quot;logs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;tracing&lt;&#x2F;code&gt; has a ton of useful features like structured logging and filtering. &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing&#x2F;*&#x2F;tracing&#x2F;&quot;&gt;Check out their documentation for more info.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;profiling&quot;&gt;Profiling&lt;&#x2F;h3&gt;
&lt;p&gt;We have added the option to add &amp;quot;tracing spans&amp;quot; to all ECS systems by enabling the &lt;code&gt;trace&lt;&#x2F;code&gt; feature. We also have built in support for the &lt;code&gt;tracing-chrome&lt;&#x2F;code&gt; extension, which causes Bevy to output traces in the &amp;quot;chrome tracing&amp;quot; format.&lt;&#x2F;p&gt;
&lt;p&gt;If you run your app with &lt;code&gt;cargo run --features bevy&#x2F;trace,bevy&#x2F;trace_chrome&lt;&#x2F;code&gt; you will get a json file which can be opened in Chrome browsers by visiting the &lt;code&gt;chrome:&#x2F;&#x2F;tracing&lt;&#x2F;code&gt; url:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;profiling.png&quot; alt=&quot;profiling&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;@superdump added support for those nice &amp;quot;span names&amp;quot; to upstream &lt;code&gt;tracing_chrome&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hidpi&quot;&gt;HIDPI&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @mockersf, @blunted2night, @cart&lt;&#x2F;div&gt;
&lt;p&gt;Bevy now handles HIDPI &#x2F; Retina &#x2F; high pixel density displays properly:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;OS-reported pixel density is now taken into account when creating windows. If a Bevy App asks for a 1280x720 window on a 2x pixel density display, it will create a window that is 2560x1440&lt;&#x2F;li&gt;
&lt;li&gt;Window width&#x2F;height is now reported in &amp;quot;logical units&amp;quot; (1280x720 in the example above). Physical units are still available using the &lt;code&gt;window.physical_width()&lt;&#x2F;code&gt; and &lt;code&gt;window.physical_height()&lt;&#x2F;code&gt; methods.&lt;&#x2F;li&gt;
&lt;li&gt;Window &amp;quot;swap chains&amp;quot; are created using the physical resolution to ensure we still have crisp rendering (2560x1440 in the example above) &lt;&#x2F;li&gt;
&lt;li&gt;Bevy UI has been adapted to handle HIDPI scaling correctly&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There is still a bit more work to be done here. While Bevy UI renders images and boxes at crisp HIDPI resolutions, text is still rendered using the logical resolution, which means it won&#x27;t be as crisp as it could be on HIDPI displays.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;timer-improvements&quot;&gt;Timer Improvements&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @amberkowalski, @marcusbuffett, @CleanCut&lt;&#x2F;div&gt;
&lt;p&gt;Bevy&#x27;s Timer component&#x2F;resource got a number of quality-of-life improvements: pausing, field accessor methods, ergonomics improvements, and internal refactoring &#x2F; code quality improvements. Timer Components also no longer tick by default. Timer resources and newtyped Timer components couldn&#x27;t tick by default, so it was a bit inconsistent to have the (relatively uncommon) &amp;quot;unwrapped component Timer&amp;quot; auto-tick.&lt;&#x2F;p&gt;
&lt;p&gt;The timer api now looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyTimer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Timer,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyTimer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; a five second non-repeating timer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_seconds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;5.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timer_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;timer_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;my_timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyTimer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; my_timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;delta_seconds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;just_finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;five seconds have passed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;task-system-improvements&quot;&gt;Task System Improvements&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @aclysma&lt;&#x2F;div&gt;
&lt;p&gt;@aclysma changed how Bevy Tasks schedules work, which increased performance in the &lt;code&gt;breakout.rs&lt;&#x2F;code&gt; example game by &lt;b style=&quot;color: rgb(50, 210, 50)&quot;&gt;~20%&lt;&#x2F;b&gt; and resolved a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;892&quot;&gt;deadlock&lt;&#x2F;a&gt; when a Task Pool is configured to only have one thread. Tasks are now executed on the calling thread immediately when there is only one task to run, which cuts down on the overhead of moving work to other threads &#x2F; blocking on them to finish.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;apple-silicon-support&quot;&gt;Apple Silicon Support&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @frewsxcv, @wyhaya, @scoopr&lt;&#x2F;div&gt;
&lt;p&gt;Bevy now runs on Apple silicon thanks to upstream work on winit (@scoopr) and coreaudio-sys (@wyhaya). @frewsxcv and @wyhaya updated Bevy&#x27;s dependencies and verified that it builds&#x2F;runs on Apple&#x27;s new chips.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;new-examples&quot;&gt;New Examples&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;contributors&quot;&gt;Contributors&lt;&#x2F;h3&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;author: @karroffel&lt;&#x2F;div&gt;
&lt;p&gt;@karroffel added a fun example that represents each Bevy contributor as a &amp;quot;Bevy Bird&amp;quot;. It scrapes the latest contributor list from git.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;contributors.png&quot; alt=&quot;contributors&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bevymark&quot;&gt;BevyMark&lt;&#x2F;h3&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;author: @robdavenport&lt;&#x2F;div&gt;
&lt;p&gt;A &amp;quot;bunnymark-style&amp;quot; benchmark illustrating Bevy&#x27;s sprite rendering performance. This was useful when implementing the renderer optimizations mentioned above.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-4&#x2F;bevymark.png&quot; alt=&quot;bevymark&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;change-log&quot;&gt;Change Log&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;added&quot;&gt;Added&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;273&quot;&gt;add bevymark benchmark example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;772&quot;&gt;gltf: support camera and fix hierarchy&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;789&quot;&gt;Add tracing spans to schedules, stages, systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;801&quot;&gt;add example that represents contributors as bevy icons&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;805&quot;&gt;Add received character&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;808&quot;&gt;Add bevy_dylib to force dynamic linking of bevy&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;815&quot;&gt;Added RenderPass::set_scissor_rect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;836&quot;&gt;&lt;code&gt;bevy_log&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Adds logging functionality as a Plugin.&lt;&#x2F;li&gt;
&lt;li&gt;Changes internal logging to work with the new implementation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;847&quot;&gt;cross-platform main function&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;852&quot;&gt;Controllable ambient light color&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Added a resource to change the current ambient light color for PBR.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;859&quot;&gt;Added more basic color constants&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;883&quot;&gt;Add box shape&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;894&quot;&gt;Expose an EventId for events&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;876&quot;&gt;System Inputs, Outputs, and Chaining&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;894&quot;&gt;Expose an &lt;code&gt;EventId&lt;&#x2F;code&gt; for events&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;917&quot;&gt;Added &lt;code&gt;set_cursor_position&lt;&#x2F;code&gt; to &lt;code&gt;Window&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;926&quot;&gt;Added new Bevy reflection system&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Replaces the properties system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;928&quot;&gt;Add support for Apple Silicon&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;937&quot;&gt;Live reloading of shaders&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;940&quot;&gt; Store mouse cursor position in Window&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;945&quot;&gt;Add removal_detection example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;946&quot;&gt;Additional vertex attribute value types&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;956&quot;&gt;Added WindowFocused event&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;979&quot;&gt;Tracing chrome span names&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1004&quot;&gt;Allow windows to be maximized&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1016&quot;&gt;GLTF: load default material&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1026&quot;&gt;can spawn a scene from a ChildBuilder, or directly set its parent when spawning it&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1038&quot;&gt;add ability to load &lt;code&gt;.dds&lt;&#x2F;code&gt;, &lt;code&gt;.tga&lt;&#x2F;code&gt;, and &lt;code&gt;.jpeg&lt;&#x2F;code&gt; texture formats&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1037&quot;&gt;add ability to provide custom a &lt;code&gt;AssetIo&lt;&#x2F;code&gt; implementation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;changed&quot;&gt;Changed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;691&quot;&gt;delegate layout reflection to RenderResourceContext&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;719&quot;&gt;Fall back to remove components one by one when failing to remove a bundle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;761&quot;&gt;Port hecs derive macro improvements&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;765&quot;&gt;Use glyph_brush_layout and add text alignment support&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;791&quot;&gt;upgrade glam and hexasphere&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;798&quot;&gt;Flexible ECS Params&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;820&quot;&gt;Make Timer.tick return &amp;amp;Self&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;821&quot;&gt;FileAssetIo includes full path on error&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;829&quot;&gt;Removed ECS query APIs that could easily violate safety from the public interface&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;834&quot;&gt;Changed Query filter API to be easier to understand&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;842&quot;&gt;bevy_render: delegate buffer aligning to render_resource_context&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;843&quot;&gt;wasm32: non-spirv shader specialization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;863&quot;&gt;Renamed XComponents to XBundle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;864&quot;&gt;Check for conflicting system resource parameters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;887&quot;&gt;Tweaks to TextureAtlasBuilder.finish()&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;893&quot;&gt;do not spend time drawing text with is_visible = false&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;903&quot;&gt;Extend the Texture asset type to support 3D data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;914&quot;&gt;Breaking changes to timer API&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Created getters and setters rather than exposing struct members.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;931&quot;&gt;Removed timer auto-ticking system&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Added an example of how to tick timers manually.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;932&quot;&gt;When a task scope produces &amp;lt;= 1 task to run, run it on the calling thread immediately&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;934&quot;&gt;Breaking changes to Time API&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Created getters to get &lt;code&gt;Time&lt;&#x2F;code&gt; state and made members private.&lt;&#x2F;li&gt;
&lt;li&gt;Modifying &lt;code&gt;Time&lt;&#x2F;code&gt;&#x27;s values directly is no longer possible outside of bevy.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;920&quot;&gt;Use &lt;code&gt;mailbox&lt;&#x2F;code&gt; instead of &lt;code&gt;fifo&lt;&#x2F;code&gt; for vsync on supported systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;947&quot;&gt;switch winit size to logical to be dpi independent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;952&quot;&gt;Change bevy_input::Touch API to match similar APIs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;955&quot;&gt;Run parent-update and transform-propagation during the &amp;quot;post-startup&amp;quot; stage (instead of &amp;quot;startup&amp;quot;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;958&quot;&gt;Renderer Optimization Round 1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;969&quot;&gt;Change&lt;code&gt;TextureAtlasBuilder&lt;&#x2F;code&gt; into expected Builder conventions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;972&quot;&gt;Optimize Text rendering &#x2F; SharedBuffers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;973&quot;&gt;hidpi swap chains&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;987&quot;&gt;optimize asset gpu data transfer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;995&quot;&gt;naming coherence for cameras&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1021&quot;&gt;Schedule v2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1027&quot;&gt;Use shaderc for aarch64-apple-darwin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1033&quot;&gt;update &lt;code&gt;Window&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;width&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;height&lt;&#x2F;code&gt; methods to return &lt;code&gt;f32&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1034&quot;&gt;Break out Visible component from Draw&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Users setting &lt;code&gt;Draw::is_visible&lt;&#x2F;code&gt; or &lt;code&gt;Draw::is_transparent&lt;&#x2F;code&gt; should now set &lt;code&gt;Visible::is_visible&lt;&#x2F;code&gt; and &lt;code&gt;Visible::is_transparent&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1043&quot;&gt;&lt;code&gt;winit&lt;&#x2F;code&gt; upgraded from version 0.23 to version 0.24&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1071&quot;&gt;set is_transparent to true by default for UI bundles&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fixed&quot;&gt;Fixed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;857&quot;&gt;Fixed typos in KeyCode identifiers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;871&quot;&gt;Remove redundant texture copies in TextureCopyNode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;892&quot;&gt;Fix a deadlock that can occur when using scope() on ComputeTaskPool from within a system&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;893&quot;&gt;Don&#x27;t draw text that isn&#x27;t visible&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;895&quot;&gt;Use &lt;code&gt;instant::Instant&lt;&#x2F;code&gt; for WASM compatibility&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;897&quot;&gt;Fix pixel format conversion in bevy_gltf&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;904&quot;&gt;Fixed duplicated children when spawning a Scene&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;905&quot;&gt;Corrected behaviour of the UI depth system&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;908&quot;&gt;Allow despawning of hierarchies in threadlocal systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;948&quot;&gt;Fix &lt;code&gt;RenderResources&lt;&#x2F;code&gt; index slicing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;955&quot;&gt;Run parent-update and transform-propagation during the &amp;quot;post-startup&amp;quot; stage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;966&quot;&gt;Fix collision detection by comparing abs() penetration depth&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;997&quot;&gt;deal with rounding issue when creating the swap chain&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1023&quot;&gt;only update components for entities in map&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;1035&quot;&gt;Don&#x27;t panic when attempting to set shader defs from an asset that hasn&#x27;t loaded yet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;contributors-1&quot;&gt;Contributors&lt;&#x2F;h2&gt;
&lt;p&gt;A huge thanks to the &lt;strong&gt;66 contributors&lt;&#x2F;strong&gt; that made this release (and associated docs) possible!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;@0x6273&lt;&#x2F;li&gt;
&lt;li&gt;@aclysma&lt;&#x2F;li&gt;
&lt;li&gt;@ak-1&lt;&#x2F;li&gt;
&lt;li&gt;@alec-deason&lt;&#x2F;li&gt;
&lt;li&gt;@AlisCode&lt;&#x2F;li&gt;
&lt;li&gt;@amberkowalski&lt;&#x2F;li&gt;
&lt;li&gt;@bjorn3&lt;&#x2F;li&gt;
&lt;li&gt;@blamelessgames&lt;&#x2F;li&gt;
&lt;li&gt;@blunted2night&lt;&#x2F;li&gt;
&lt;li&gt;@bonsairobo&lt;&#x2F;li&gt;
&lt;li&gt;@cart&lt;&#x2F;li&gt;
&lt;li&gt;@CleanCut&lt;&#x2F;li&gt;
&lt;li&gt;@ColdIce1605&lt;&#x2F;li&gt;
&lt;li&gt;@dallenng&lt;&#x2F;li&gt;
&lt;li&gt;@e00E&lt;&#x2F;li&gt;
&lt;li&gt;@easynam&lt;&#x2F;li&gt;
&lt;li&gt;@frewsxcv&lt;&#x2F;li&gt;
&lt;li&gt;@FuriouZz&lt;&#x2F;li&gt;
&lt;li&gt;@Git0Shuai&lt;&#x2F;li&gt;
&lt;li&gt;@iMplode-nZ&lt;&#x2F;li&gt;
&lt;li&gt;@iwikal&lt;&#x2F;li&gt;
&lt;li&gt;@jcornaz&lt;&#x2F;li&gt;
&lt;li&gt;@Jerald&lt;&#x2F;li&gt;
&lt;li&gt;@joshuajbouw&lt;&#x2F;li&gt;
&lt;li&gt;@julhe&lt;&#x2F;li&gt;
&lt;li&gt;@karroffel&lt;&#x2F;li&gt;
&lt;li&gt;@Keats&lt;&#x2F;li&gt;
&lt;li&gt;@Kurble&lt;&#x2F;li&gt;
&lt;li&gt;@lassade&lt;&#x2F;li&gt;
&lt;li&gt;@lukors&lt;&#x2F;li&gt;
&lt;li&gt;@marcusbuffett&lt;&#x2F;li&gt;
&lt;li&gt;@marius851000&lt;&#x2F;li&gt;
&lt;li&gt;@memoryruins&lt;&#x2F;li&gt;
&lt;li&gt;@MGlolenstine&lt;&#x2F;li&gt;
&lt;li&gt;@milkybit&lt;&#x2F;li&gt;
&lt;li&gt;@MinerSebas&lt;&#x2F;li&gt;
&lt;li&gt;@mkhan45&lt;&#x2F;li&gt;
&lt;li&gt;@mockersf&lt;&#x2F;li&gt;
&lt;li&gt;@Moxinilian&lt;&#x2F;li&gt;
&lt;li&gt;@mrk-its&lt;&#x2F;li&gt;
&lt;li&gt;@mvlabat&lt;&#x2F;li&gt;
&lt;li&gt;@nic96&lt;&#x2F;li&gt;
&lt;li&gt;@no1hitjam&lt;&#x2F;li&gt;
&lt;li&gt;@octtep&lt;&#x2F;li&gt;
&lt;li&gt;@OptimisticPeach&lt;&#x2F;li&gt;
&lt;li&gt;@Plecra&lt;&#x2F;li&gt;
&lt;li&gt;@PrototypeNM1&lt;&#x2F;li&gt;
&lt;li&gt;@rmsthebest&lt;&#x2F;li&gt;
&lt;li&gt;@RobDavenport&lt;&#x2F;li&gt;
&lt;li&gt;@robertwayne&lt;&#x2F;li&gt;
&lt;li&gt;@rod-salazar&lt;&#x2F;li&gt;
&lt;li&gt;@sapir&lt;&#x2F;li&gt;
&lt;li&gt;@sburris0&lt;&#x2F;li&gt;
&lt;li&gt;@sdfgeoff&lt;&#x2F;li&gt;
&lt;li&gt;@shirshak55&lt;&#x2F;li&gt;
&lt;li&gt;@smokku&lt;&#x2F;li&gt;
&lt;li&gt;@steveyen&lt;&#x2F;li&gt;
&lt;li&gt;@superdump&lt;&#x2F;li&gt;
&lt;li&gt;@SvenTS&lt;&#x2F;li&gt;
&lt;li&gt;@tangmi&lt;&#x2F;li&gt;
&lt;li&gt;@thebluefish&lt;&#x2F;li&gt;
&lt;li&gt;@Tiagojdferreira&lt;&#x2F;li&gt;
&lt;li&gt;@tigregalis&lt;&#x2F;li&gt;
&lt;li&gt;@toothbrush7777777&lt;&#x2F;li&gt;
&lt;li&gt;@Veykril&lt;&#x2F;li&gt;
&lt;li&gt;@yrns&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bevy 0.3</title>
		<published>2020-11-03T00:00:00+00:00</published>
		<updated>2020-11-03T00:00:00+00:00</updated>
		<link href="https://bevyengine.org/news/bevy-0-3/" type="text/html"/>
		<id>https://bevyengine.org/news/bevy-0-3/</id>
		<content type="html">&lt;p&gt;A little over a month after releasing Bevy 0.2, and thanks to &lt;strong&gt;59&lt;&#x2F;strong&gt; contributors, &lt;strong&gt;122&lt;&#x2F;strong&gt; pull requests, and our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;cart&quot;&gt;&lt;strong&gt;generous sponsors&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, I&#x27;m happy to announce the &lt;strong&gt;Bevy 0.3&lt;&#x2F;strong&gt; release on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bevy&quot;&gt;crates.io&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;For those who don&#x27;t know, Bevy is a refreshingly simple data-driven game engine built in Rust. You can check out &lt;a href=&quot;&#x2F;learn&#x2F;book&#x2F;getting-started&#x2F;&quot;&gt;Quick Start Guide&lt;&#x2F;a&gt; to get started. Bevy is also free and open source forever! You can grab the full &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&quot;&gt;source code&lt;&#x2F;a&gt; on GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the highlights from this release:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;initial-android-support&quot;&gt;Initial Android Support&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @enfipy, @PrototypeNM1, @endragor, @naithar&lt;&#x2F;div&gt;
&lt;p&gt;You can try out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;tree&#x2F;v0.3.0&#x2F;examples&#x2F;android&quot;&gt;Bevy Android example&lt;&#x2F;a&gt; by following the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;v0.3.0&#x2F;examples&#x2F;README.md#android&quot;&gt;instructions here&lt;&#x2F;a&gt;. While many things work, please note that this is &lt;em&gt;very hot&lt;&#x2F;em&gt; off the presses. Some features will work and others probably won&#x27;t. Now is a great time to dive in and help us close the gaps!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-3&#x2F;android.png&quot; alt=&quot;android&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This was a massive group effort that spanned multiple projects:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bevy: rewrote bevy-glsl-to-spirv to support android &#x2F; static libraries (@PrototypeNM1, @enfipy)&lt;&#x2F;li&gt;
&lt;li&gt;Bevy: &lt;code&gt;bevy_asset&lt;&#x2F;code&gt; backend using Android Asset Manager (@enfipy)&lt;&#x2F;li&gt;
&lt;li&gt;Bevy: Touch support (@naithar)&lt;&#x2F;li&gt;
&lt;li&gt;Bevy: Texture format fix (@enfipy)&lt;&#x2F;li&gt;
&lt;li&gt;Bevy: UI touch fixes, touch force, and android example (@enfipy)&lt;&#x2F;li&gt;
&lt;li&gt;Cpal: android audio support (@endragor) &lt;&#x2F;li&gt;
&lt;li&gt;android-ndk-rs &#x2F; cargo-apk: fix to support Bevy project structure (@PrototypeNM1)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;initial-ios-support&quot;&gt;Initial iOS Support&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @simlay, @MichaelHills, @Dash-L, @naithar&lt;&#x2F;div&gt;
&lt;p&gt;Bevy can now run on iOS!&lt;&#x2F;p&gt;
&lt;img src=&quot;ios.png&quot; style=&quot;margin-left: -4rem; margin-bottom: -5rem; margin-top: -3rem&quot; &#x2F;&gt;
&lt;p&gt;You can try out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;tree&#x2F;v0.3.0&#x2F;examples&#x2F;ios&quot;&gt;Bevy iOS example&lt;&#x2F;a&gt; by following the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;tree&#x2F;v0.3.0&#x2F;examples#ios&quot;&gt;instructions here&lt;&#x2F;a&gt;. This one is also hot off the presses: some features will work and others probably won&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;This was another large group effort that spanned multiple projects:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bevy: XCode Project &#x2F; Example (@simlay with help from @MichaelHills)&lt;&#x2F;li&gt;
&lt;li&gt;Bevy: Runtime shader compilation using shaderc (@MichaelHills)&lt;&#x2F;li&gt;
&lt;li&gt;Bevy: Rodio upgrade (@Dash-L)&lt;&#x2F;li&gt;
&lt;li&gt;Bevy: Touch support (@naithar)&lt;&#x2F;li&gt;
&lt;li&gt;Winit: Fix iOS portrait view (@MichaelHills) &lt;&#x2F;li&gt;
&lt;li&gt;RustAudio: iOS support (@simlay and @MichaelHills)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Known issues:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RustAudio&#x2F;cpal&#x2F;pull&#x2F;485&quot;&gt;Audio doesn&#x27;t quite work yet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;wasm-asset-loading&quot;&gt;WASM Asset Loading&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @mrk-its (and ported to the new AssetIo by @cart)&lt;&#x2F;div&gt;
&lt;p&gt;@mrk-its has been hard at work on expanding Bevy&#x27;s WASM support. In this release we landed WASM asset loading. You can now load assets when you publish to WASM just like you would on any other platform:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;sprite.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the asset hasn&#x27;t already been loaded, this will make a &lt;code&gt;fetch()&lt;&#x2F;code&gt; request to retrieve the asset over HTTP.&lt;&#x2F;p&gt;
&lt;p&gt;@mrk-its has also been building a custom WebGL2 &lt;code&gt;bevy_render&lt;&#x2F;code&gt; backend. It is already pretty usable, but its not &lt;em&gt;quite&lt;&#x2F;em&gt; ready yet. Expect more news on this soon!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;touch-input&quot;&gt;Touch Input&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @naithar&lt;&#x2F;div&gt;
&lt;p&gt;Bevy now has support for touches:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;touch_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;touches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Touches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; you can iterate all current touches and retrieve their state like this:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;active touch: {:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter_just_pressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;just pressed {:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter_just_released&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;just released {:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter_just_cancelled&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;just cancelled {:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; touch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also consume raw touch events using the &lt;code&gt;Events&amp;lt;TouchInput&amp;gt;&lt;&#x2F;code&gt; resource.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;asset-system-improvements&quot;&gt;Asset System Improvements&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;h3 id=&quot;asset-handle-reference-counting&quot;&gt;Asset Handle Reference Counting&lt;&#x2F;h3&gt;
&lt;p&gt;Assets are now automatically freed when their &amp;quot;handle reference count&amp;quot; reaches zero. This means you no longer need to think about freeing assets manually:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Calling load() now returns a strong handle:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;sprite.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Note that you no longer need to unwrap() loaded handles. Ergonomics for the win!

&#x2F;&#x2F; Cloning a handle increases the reference count by one
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; second_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Spawn a sprite and give it our handle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SpriteComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Later in some other system:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;despawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;sprite_entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; There are no more active handles to &amp;quot;sprite.png&amp;quot;, so it will be freed before the next update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;asset-loaders-can-now-load-multiple-assets&quot;&gt;Asset Loaders can now load multiple assets&lt;&#x2F;h3&gt;
&lt;p&gt;In past releases, &lt;code&gt;AssetLoaders&lt;&#x2F;code&gt; could only produce a single asset of a single type. In &lt;strong&gt;Bevy 0.3&lt;&#x2F;strong&gt;, they can now produce any number of assets for any type. The old behavior was extremely limiting when loading assets like GLTF files, which might produce many meshes, textures, and scenes. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;sub-asset-loading&quot;&gt;Sub-Asset Loading&lt;&#x2F;h3&gt;
&lt;p&gt;Sometimes you only want to load a specific asset from an asset source. You can now load sub assets like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Mesh0&#x2F;Primitive0 references the first mesh primitive in &amp;quot;my_scene.gltf&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; mesh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;my_scene.gltf#Mesh0&#x2F;Primitive0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;assetio-trait&quot;&gt;AssetIo Trait&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;AssetServer&lt;&#x2F;code&gt; is now backed by the &lt;code&gt;AssetIo&lt;&#x2F;code&gt; trait. This allows us to load assets from whatever storage we want. This means on desktop we now load from the filesystem, on Android we use the Android Asset Manager, and on the web we make HTTP requests using the &lt;code&gt;fetch()&lt;&#x2F;code&gt; api.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;asset-dependencies&quot;&gt;Asset Dependencies&lt;&#x2F;h3&gt;
&lt;p&gt;Assets can now depend on other assets, which will automatically be loaded when the original asset is loaded. This is useful when loading something like a &amp;quot;scene&amp;quot; which might reference other asset sources. We utilize this in our new GLTF loader.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;removed-assetserver-load-sync&quot;&gt;Removed AssetServer::load_sync()&lt;&#x2F;h3&gt;
&lt;p&gt;This might rustle some feathers, but &lt;code&gt;AssetServer::load_sync()&lt;&#x2F;code&gt; had to go! This api wasn&#x27;t WASM friendly, encouraged users to block game execution for the sake of convenience (which causes &amp;quot;hitching&amp;quot;), and was incompatible with the new AssetLoader api. Asset loading is now always asynchronous. Users of &lt;code&gt;load_sync()&lt;&#x2F;code&gt; should instead &lt;code&gt;load()&lt;&#x2F;code&gt; their assets, check load status in their systems, and change game state accordingly. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;gltf-scene-loader&quot;&gt;GLTF Scene Loader&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;p&gt;Up until this point, the GLTF loader was painfully limited. It could only load the first mesh with a single texture in a GLTF file. For &lt;strong&gt;Bevy 0.3&lt;&#x2F;strong&gt;, we took advantage of the asset system improvements to write a new &lt;code&gt;GltfLoader&lt;&#x2F;code&gt; that loads GLTF files as Bevy &lt;code&gt;Scenes&lt;&#x2F;code&gt;, along with all meshes and textures in the files.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s Bevy loading the Khronos Flight Helmet example, which consists of multiple meshes and textures!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-3&#x2F;flight_helmet.png&quot; alt=&quot;flight helmet&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here is the complete code for a system that loads a GLTF file and spawns it as a scene:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load_gltf_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; scene_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;models&#x2F;FlightHelmet&#x2F;FlightHelmet.gltf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn_scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;scene_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;bevy-ecs-improvements&quot;&gt;Bevy ECS Improvements&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;h3 id=&quot;query-ergonomics&quot;&gt;Query Ergonomics&lt;&#x2F;h3&gt;
&lt;p&gt;In this release I finally was able to remove the one thing I &lt;em&gt;truly despised&lt;&#x2F;em&gt; in Bevy ECS. In previous versions of Bevy, iterating over the components in a &lt;code&gt;Query&lt;&#x2F;code&gt; looked like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; The `&amp;amp;mut` here just felt so unnatural
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Or if you preferred you could do this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; query.iter().iter()? Really???
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarly, retrieving a specific entity&#x27;s component&#x27;s looked like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; access components here
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;strong&gt;Bevy 0.3&lt;&#x2F;strong&gt; you can just do this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; iteration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; sweet ergonomic bliss
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; entity lookup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; boilerplate be gone!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might naturally be thinking something like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Why did this take so long? Why would removing a single &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt; be hard?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a long story! In summary:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The old api looked the way it did for a reason. It was the result of good design choices that protect against unsafe memory access in a parallel environment.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;query.iter()&lt;&#x2F;code&gt; didn&#x27;t actually return an iterator. It returned a &lt;em&gt;wrapper&lt;&#x2F;em&gt; that held an atomic lock on the component storages. The same was true for the type returned by &lt;code&gt;query.entity()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Removing these &amp;quot;wrapper types&amp;quot; would have allowed unsafe behavior because another Query could access the same components in a way that violated Rust&#x27;s mutability rules.&lt;&#x2F;li&gt;
&lt;li&gt;Due to the iterator implementation and quirks in the rust compiler, removing the wrapper type &lt;em&gt;tanked&lt;&#x2F;em&gt; iteration performance by about ~2-3x.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Fortunately we finally found ways to solve all of these problems. The newly added &lt;code&gt;QuerySets&lt;&#x2F;code&gt; allow us to completely remove the locks (and wrapper types). And by completely rewriting &lt;code&gt;QueryIter&lt;&#x2F;code&gt; we were able to avoid the performance hit that removing the wrapper incurred. Read on for the details!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;100-lockless-parallel-ecs&quot;&gt;100% Lockless Parallel ECS&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy ECS is now completely lock free. In Bevy 0.2, we made direct &lt;code&gt;World&lt;&#x2F;code&gt; access and &amp;quot;for-each&amp;quot; systems lock free. This is possible because the Bevy ECS scheduler ensures that systems only run in parallel in ways that respect Rust&#x27;s mutability rules. &lt;&#x2F;p&gt;
&lt;p&gt;We couldn&#x27;t remove locks from &lt;code&gt;Query&lt;&#x2F;code&gt; systems because of systems like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;conflicting_query_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;q0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;q1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; A, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; q0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;some_entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;another_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; q1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;some_entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Aaah!!! We have two mutable references to some_entity&amp;#39;s A component!
    &#x2F;&#x2F; Very unsafe!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The locks ensured that the second &lt;code&gt;q1.get_mut(some_entity)&lt;&#x2F;code&gt; access panicked, keeping us nice and safe. In &lt;strong&gt;Bevy 0.3&lt;&#x2F;strong&gt;, a system like &lt;code&gt;conflicting_query_system&lt;&#x2F;code&gt; will fail when the schedule is constructed. By default, &lt;em&gt;systems cannot have conflicting queries&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However there are some cases where a system &lt;em&gt;needs&lt;&#x2F;em&gt; conflicting queries to do what it needs to do. For these cases, we added &lt;code&gt;QuerySets&lt;&#x2F;code&gt;: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;queries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;QuerySet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; A, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&amp;gt;)&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; queries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;q0_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; queries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;q1_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By putting our conflicting &lt;code&gt;Queries&lt;&#x2F;code&gt; in a &lt;code&gt;QuerySet&lt;&#x2F;code&gt;, the Rust borrow checker protects us from unsafe query accesses.&lt;&#x2F;p&gt;
&lt;p&gt;Because of this, we were able to remove &lt;em&gt;all&lt;&#x2F;em&gt; safety checks from &lt;code&gt;query.iter()&lt;&#x2F;code&gt; and &lt;code&gt;query.get(entity)&lt;&#x2F;code&gt;, which means these methods are now &lt;em&gt;exactly&lt;&#x2F;em&gt; as fast as their &lt;code&gt;World&lt;&#x2F;code&gt; counterparts (which we made lock-free in Bevy 0.2). &lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance-improvements&quot;&gt;Performance Improvements&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy had a number of nice performance improvements this release:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Removed atomic locks from Query access, making Bevy ECS 100% lock free&lt;&#x2F;li&gt;
&lt;li&gt;Removed archetype &amp;quot;safety checks&amp;quot; from Query access. At this point we have already verified that the given Query access is safe, so we don&#x27;t need to check again on every call.&lt;&#x2F;li&gt;
&lt;li&gt;Rewrote &lt;code&gt;QueryIter&lt;&#x2F;code&gt; to be simpler (and therefore easier to control optimizations for), which allowed us to remove the iterator wrapper without tanking performance. This also resolved some performance inconsistencies where some system permutations performed optimally and others didn&#x27;t. Now everything is on the &amp;quot;fast path&amp;quot;!&lt;&#x2F;li&gt;
&lt;li&gt;Ported some performance improvements from upstream hecs, which improved iteration over heavily fragmented archetypes and improved component insertion times&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;getting-an-entity-s-component-per-100k-in-milliseconds-smaller-is-better&quot;&gt;Getting an Entity&#x27;s Component (per 100k, in milliseconds, smaller is better)&lt;&#x2F;h4&gt;
&lt;p&gt;Note: these numbers are for getting a component 100,000 times, not for an individual component lookup&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-3&#x2F;ecs_get_component.svg&quot; alt=&quot;getting an entity&#x27;s component&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is where the big wins were. By removing locks and safety checks from Query systems, we were able to &lt;em&gt;significantly&lt;&#x2F;em&gt; reduce the cost of retrieving a specific entity&#x27;s component from within a system.&lt;&#x2F;p&gt;
&lt;p&gt;I included a comparison to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;amethyst&#x2F;legion&quot;&gt;Legion ECS&lt;&#x2F;a&gt; (another great archetypal ECS with a parallel scheduler) to illustrate why Bevy&#x27;s new approach is so cool. Legion exposes a direct &amp;quot;world like&amp;quot; api (called a SubWorld) in its systems. The SubWorld&#x27;s entry api &lt;em&gt;cannot&lt;&#x2F;em&gt; know ahead of time what types will be passed into it, which means it &lt;em&gt;must&lt;&#x2F;em&gt; do (relatively) expensive safety checks to ensure the user doesn&#x27;t request access to something they shouldn&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy&#x27;s scheduler pre-checks &lt;code&gt;Queries&lt;&#x2F;code&gt; once ahead of time, which allows systems to access their results without any additional checks.&lt;&#x2F;p&gt;
&lt;p&gt;The test was to lookup (and modify) a specific entity&#x27;s component 100,000 times on each system iteration. Here is a quick rundown of how these tests were performed in each case:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;bevy (world): Direct &lt;code&gt;World&lt;&#x2F;code&gt; access using &lt;code&gt;world.get_mut::&amp;lt;A&amp;gt;(entity)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;bevy (system): A system containing a &lt;code&gt;Query&amp;lt;&amp;amp;mut A&amp;gt;&lt;&#x2F;code&gt; that accesses the component using &lt;code&gt;query.get_mut(entity)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;legion (world): Direct &lt;code&gt;World&lt;&#x2F;code&gt; access using &lt;code&gt;let entry = world.entry(entity); entry.get_component_mut::&amp;lt;A&amp;gt;()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;legion (system): A system with &lt;code&gt;SubWorld&lt;&#x2F;code&gt; access using &lt;code&gt;let entry = world.entry(entity); entry.get_component_mut::&amp;lt;A&amp;gt;()&lt;&#x2F;code&gt; &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It&#x27;s worth noting that using &lt;code&gt;query.get_component::&amp;lt;T&amp;gt;(entity)&lt;&#x2F;code&gt; instead of &lt;code&gt;query.get(entity)&lt;&#x2F;code&gt; does require safety checks, for the same reason the legion entry api does. We cannot know ahead of time what component type a caller will pass into the method, which means we &lt;em&gt;must&lt;&#x2F;em&gt; check it to make sure it matches the &lt;code&gt;Query&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Additionally, here are some relevant &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-gamedev&#x2F;ecs_bench_suite&quot;&gt;ecs_bench_suite&lt;&#x2F;a&gt; results (omitted benchmarks had no significant change):&lt;&#x2F;p&gt;
&lt;h4 id=&quot;component-insertion-in-microseconds-smaller-is-better&quot;&gt;Component Insertion (in microseconds, smaller is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-3&#x2F;ecs_simple_insert.svg&quot; alt=&quot;component insertion&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;component-add-remove-in-milliseconds-smaller-is-better&quot;&gt;Component Add&#x2F;Remove (in milliseconds, smaller is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-3&#x2F;ecs_add_remove.svg&quot; alt=&quot;component add&#x2F;remove&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fragmented-iteration-in-nanoseconds-smaller-is-better&quot;&gt;Fragmented Iteration (in nanoseconds, smaller is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-3&#x2F;ecs_frag_iter.svg&quot; alt=&quot;fragmented iteration&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;thread-local-resources&quot;&gt;Thread Local Resources&lt;&#x2F;h3&gt;
&lt;p&gt;Some resource types cannot (or should not) be passed between threads. This is often true for low level apis like windowing, input, and audio. It is now possible to add &amp;quot;thread local resources&amp;quot; to the &lt;code&gt;Resources&lt;&#x2F;code&gt; collection, which can only be accessed from the main thread using &amp;quot;thread local systems&amp;quot;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; in your app setup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_thread_local_resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; a thread local system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; World, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; my_resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;get_thread_local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;query-api-changes&quot;&gt;Query Api Changes&lt;&#x2F;h3&gt;
&lt;p&gt;First, to improve clarity we renamed &lt;code&gt;query.get::&amp;lt;Component&amp;gt;(entity)&lt;&#x2F;code&gt; to &lt;code&gt;query.get_component::&amp;lt;Component&amp;gt;(entity)&lt;&#x2F;code&gt;. We now return the &amp;quot;full&amp;quot; query result for a specific entity using &lt;code&gt;query.get(entity)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To allow multiple concurrent reads of Queries (where it is safe), we added separate &lt;code&gt;query.iter()&lt;&#x2F;code&gt; and &lt;code&gt;query.iter_mut()&lt;&#x2F;code&gt; apis, as well as &lt;code&gt;query.get(entity)&lt;&#x2F;code&gt; and &lt;code&gt;query.get_mut(entity)&lt;&#x2F;code&gt;. Queries that are &amp;quot;read only&amp;quot; can now retrieve their results via an immutable borrow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mesh-improvements&quot;&gt;Mesh Improvements&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;flexible-mesh-vertex-attributes&quot;&gt;Flexible Mesh Vertex Attributes&lt;&#x2F;h3&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @julhe&lt;&#x2F;div&gt;
&lt;p&gt;Bevy meshes used to require exactly three &amp;quot;vertex attributes&amp;quot;: &lt;code&gt;position&lt;&#x2F;code&gt;, &lt;code&gt;normal&lt;&#x2F;code&gt;, and &lt;code&gt;uv&lt;&#x2F;code&gt;. This worked for most things, but there are a number of cases that require other attributes, such as &amp;quot;vertex colors&amp;quot; or &amp;quot;bone weights for animation&amp;quot;. &lt;strong&gt;Bevy 0.3&lt;&#x2F;strong&gt; adds support for custom vertex attributes. Meshes can define whatever attributes they want and shaders can consume whatever attributes they want!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;v0.3.0&#x2F;examples&#x2F;shader&#x2F;mesh_custom_attribute.rs&quot;&gt;Here is an example&lt;&#x2F;a&gt; that illustrates how to define a custom shader that consumes a mesh with an added &amp;quot;vertex color&amp;quot; attribute.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-3&#x2F;custom_vertex_attribute.png&quot; alt=&quot;custom_vertex_attribute&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;index-buffer-specialization&quot;&gt;Index Buffer Specialization&lt;&#x2F;h3&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @termhn&lt;&#x2F;div&gt;
&lt;p&gt;Rendering meshes often involves using vertex &amp;quot;indices&amp;quot; to cut down on duplicate vertex information. Bevy used to hard code the precision of these indices to &lt;code&gt;u16&lt;&#x2F;code&gt;, which was too small for some cases. Now render pipelines can &amp;quot;specialize&amp;quot; based on a configured index buffer, which now defaults to &lt;code&gt;u32&lt;&#x2F;code&gt; to cover most use cases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transform-re-rewrite&quot;&gt;Transform Re-Rewrite&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @MarekLg (with some design help from @AThilenius, @bitshifter, @termhn, and @cart)&lt;&#x2F;div&gt;
&lt;p&gt;Transforms are important to get right. They are used in many slices of the engine, user code touches them constantly, and they are relatively expensive to compute: especially transform hierarchies.&lt;&#x2F;p&gt;
&lt;p&gt;In the last release, we vastly simplified Bevy&#x27;s transform system to use a consolidated &lt;code&gt;Transform&lt;&#x2F;code&gt; and &lt;code&gt;GlobalTransform&lt;&#x2F;code&gt; instead of multiple separate &lt;code&gt;Translation&lt;&#x2F;code&gt;, &lt;code&gt;Rotation&lt;&#x2F;code&gt;, and &lt;code&gt;Scale&lt;&#x2F;code&gt; components (which were synced to &lt;code&gt;Transform&lt;&#x2F;code&gt; and &lt;code&gt;GlobalTransform&lt;&#x2F;code&gt;). This made the user-facing api&#x2F;dataflow simpler, as well as the underlying implementation. The &lt;code&gt;Transform&lt;&#x2F;code&gt; component was backed by a 4x4 matrix. I pressed the big green &amp;quot;merge&amp;quot; button ... happy that we had solved the Transform problem once and for all!&lt;&#x2F;p&gt;
&lt;p&gt;It turns out there was still more work to be done! &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&#x2F;229#issuecomment-698953161&quot;&gt;@AThilenius pointed out&lt;&#x2F;a&gt; that using a 4x4 matrix as the source of truth for an affine transform accumulates error over time. Additionally, the Transform api was still a little cumbersome to use. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&#x2F;229#issuecomment-699172675&quot;&gt;At the suggestion of @termhn&lt;&#x2F;a&gt; we decided to investigate using a &amp;quot;similarity&amp;quot; as the source of truth. This had the following benefits:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;no more error accumulation&lt;&#x2F;li&gt;
&lt;li&gt;we could directly expose translation&#x2F;rotation&#x2F;scale fields, which simplified the api significantly&lt;&#x2F;li&gt;
&lt;li&gt;cheaper to store and cheaper to compute hierarchies in some cases&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We collectively decided this was a good path forward and now we have a re-rewrite that is even better. Yes this is &lt;em&gt;another&lt;&#x2F;em&gt; breaking change, but thats why we label Bevy as being in the &amp;quot;experimentation phase&amp;quot;. Now is the time to break things as often as possible to ensure that we find good apis that will stand the test of time.&lt;&#x2F;p&gt;
&lt;p&gt;This is what the new &lt;code&gt;Transform&lt;&#x2F;code&gt; api looks like in a Bevy ECS system:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; move along the positive x-axis
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;translation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; rotate 180 degrees (pi) around the y-axis
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rotation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;*= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Quat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_rotation_y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PI&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; scale 2x
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;scale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;*= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compared to the last version this is easier to use, more correct, and should also be slightly faster.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gamepad-settings&quot;&gt;Gamepad Settings&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @simpuid&lt;&#x2F;div&gt;
&lt;p&gt;The newly added &lt;code&gt;GamepadSettings&lt;&#x2F;code&gt; resource gives developers the ability to customize gamepad settings on a per-controller, per-axis&#x2F;button basis:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;gamepad_settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;GamepadSettings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    gamepad_settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;axis_settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        GamepadAxis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Gamepad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;GamepadAxisType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;LeftStickX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        AxisSettings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            positive_high&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            positive_low&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },
    );
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;plugin-groups&quot;&gt;Plugin Groups&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;p&gt;If you&#x27;ve used Bevy, you&#x27;re probably familiar with this part of &lt;code&gt;App&lt;&#x2F;code&gt; initialization:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_default_plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This adds the plugins for all of the &amp;quot;core&amp;quot; engine functionality (rendering, input, audio, windowing, etc). It was straightforward, but also very static. What if you don&#x27;t want to add &lt;em&gt;all&lt;&#x2F;em&gt; of the default plugins? What if you want to create your own custom set of plugins?&lt;&#x2F;p&gt;
&lt;p&gt;To resolve this, we added &lt;code&gt;PluginGroups&lt;&#x2F;code&gt;, which are ordered collections of plugins that can be individually enabled or disabled:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; This:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_default_plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Has been replaced by this:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;DefaultPlugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; You can disable specific plugins in a PluginGroup:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugins_with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;DefaultPlugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;disable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RenderPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;()
         .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;disable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AudioPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;()
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; And you can create your own PluginGroups:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;HelloWorldPlugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PluginGroup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;HelloWorldPlugins &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; PluginGroupBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PrintHelloPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
             .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PrintWorldPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;HelloWorldPlugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;dynamic-window-settings&quot;&gt;Dynamic Window Settings&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @mockersf&lt;&#x2F;div&gt;
&lt;p&gt;Bevy provides a backend-agnostic windowing api. Up until this point, window settings could only be set once at app startup. If you wanted to set window settings dynamically, you had to directly interact with window backends (ex: winit).&lt;&#x2F;p&gt;
&lt;p&gt;In this release we added the ability to dynamically set window properties at runtime using the Bevy window abstraction:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; This system dynamically sets the window title to the number of seconds since startup. Because why not?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;change_title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;windows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Windows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; window &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; windows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get_primary_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;set_title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Seconds since startup: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;seconds_since_startup
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;documentation-search-ability&quot;&gt;Documentation Search-ability&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @memoryruins&lt;&#x2F;div&gt;
&lt;p&gt;The  &lt;code&gt;bevy&lt;&#x2F;code&gt; crate documentation search function now returns results for all sub-crates (like bevy_sprite). Due to how documentation is generated for re-exported crates, by default the &lt;code&gt;bevy&lt;&#x2F;code&gt; search index only covered the &amp;quot;prelude&amp;quot;. @memoryruins found a way to fix this problem by creating new modules and exporting the contents of each crate within those modules (as opposed to aliasing the crates).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-3&#x2F;docs.png&quot; alt=&quot;docs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;change-log&quot;&gt;Change Log&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;added&quot;&gt;Added&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;696&quot;&gt;Touch Input&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;539&quot;&gt;iOS XCode Project&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;740&quot;&gt;Android Example and use bevy-glsl-to-spirv 0.2.0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;679&quot;&gt;Introduce Mouse capture API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;696&quot;&gt;&lt;code&gt;bevy_input::touch&lt;&#x2F;code&gt;: implement touch input&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;653&quot;&gt;D-pad support on MacOS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;723&quot;&gt;Support for Android file system&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;744&quot;&gt;app: PluginGroups and DefaultPlugins&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PluginGroup&lt;&#x2F;code&gt; is a collection of plugins where each plugin can be enabled or disabled.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;683&quot;&gt;Support to get gamepad button&#x2F;trigger values using &lt;code&gt;Axis&amp;lt;GamepadButton&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;627&quot;&gt;Expose Winit decorations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;644&quot;&gt;Enable changing window settings at runtime&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;674&quot;&gt;Expose a pointer of EventLoopProxy to process custom messages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;460&quot;&gt;Add a way to specify padding&#x2F; margins between sprites in a TextureAtlas&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;579&quot;&gt;Add &lt;code&gt;bevy_ecs::Commands::remove&lt;&#x2F;code&gt; for bundles&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;675&quot;&gt;impl &lt;code&gt;Default&lt;&#x2F;code&gt; for &lt;code&gt;TextureFormat&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;595&quot;&gt;Expose current_entity in ChildBuilder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;671&quot;&gt;&lt;code&gt;AppBuilder::add_thread_local_resource&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;661&quot;&gt;&lt;code&gt;Commands::write_world_boxed&lt;&#x2F;code&gt; takes a pre-boxed world writer to the ECS&#x27;s command queue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;678&quot;&gt;&lt;code&gt;FrameTimeDiagnosticsPlugin&lt;&#x2F;code&gt; now shows &amp;quot;frame count&amp;quot; in addition to &amp;quot;frame time&amp;quot; and &amp;quot;fps&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;565&quot;&gt;Add hierarchy example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;397&quot;&gt;&lt;code&gt;WgpuPowerOptions&lt;&#x2F;code&gt; for choosing between low power, high performance, and adaptive power&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Derive &lt;code&gt;Debug&lt;&#x2F;code&gt; for more types: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;597&quot;&gt;#597&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;632&quot;&gt;#632&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;Index buffer specialization
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;568&quot;&gt;Allows the use of U32 indices in Mesh index buffers in addition to the usual U16 indices&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;572&quot;&gt;Switch to u32 indices by default&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;More instructions for system dependencies
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;528&quot;&gt;Add &lt;code&gt;systemd-devel&lt;&#x2F;code&gt; for Fedora Linux dependencies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;538&quot;&gt;Add &lt;code&gt;libudev-dev&lt;&#x2F;code&gt; to Ubuntu dependencies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;645&quot;&gt;Add Void Linux to linux dependencies file&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;727&quot;&gt;WSL2 instructions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;552&quot;&gt;Suggest &lt;code&gt;-Zrun-dsymutil-no&lt;&#x2F;code&gt; for faster compilation on MacOS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;changed&quot;&gt;Changed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;741&quot;&gt;ecs: ergonomic query.iter(), remove locks, add QuerySets&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;query.iter()&lt;&#x2F;code&gt; is now a real iterator!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;QuerySet&lt;&#x2F;code&gt; allows working with conflicting queries and is checked at compile-time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;752&quot;&gt;Rename &lt;code&gt;query.entity()&lt;&#x2F;code&gt; and &lt;code&gt;query.get()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;query.get::&amp;lt;Component&amp;gt;(entity)&lt;&#x2F;code&gt; is now &lt;code&gt;query.get_component::&amp;lt;Component&amp;gt;(entity)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;query.entity(entity)&lt;&#x2F;code&gt; is now &lt;code&gt;query.get(entity)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;693&quot;&gt;Asset system rework and GLTF scene loading&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;703&quot;&gt;Introduces WASM implementation of &lt;code&gt;AssetIo&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;596&quot;&gt;Move transform data out of Mat4&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;700&quot;&gt;Separate gamepad state code from gamepad event code and other customizations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;711&quot;&gt;gamepad: expose raw and filtered gamepad events&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;689&quot;&gt;Do not depend on &lt;code&gt;spirv-reflect&lt;&#x2F;code&gt; on &lt;code&gt;wasm32&lt;&#x2F;code&gt; target&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;544&quot;&gt;Move dynamic plugin loading to its own optional crate&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;515&quot;&gt;Add field to &lt;code&gt;WindowDescriptor&lt;&#x2F;code&gt; on wasm32 targets to optionally provide an existing canvas element as winit window&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;660&quot;&gt;Adjust how &lt;code&gt;ArchetypeAccess&lt;&#x2F;code&gt; tracks mutable &amp;amp; immutable deps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;535&quot;&gt;Use &lt;code&gt;FnOnce&lt;&#x2F;code&gt; in &lt;code&gt;Commands&lt;&#x2F;code&gt; and &lt;code&gt;ChildBuilder&lt;&#x2F;code&gt; where possible&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;690&quot;&gt;Runners explicitly call &lt;code&gt;App.initialize()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;616&quot;&gt;sRGB awareness for &lt;code&gt;Color&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Color is now assumed to be provided in the non-linear sRGB colorspace.
Constructors such as &lt;code&gt;Color::rgb&lt;&#x2F;code&gt; and &lt;code&gt;Color::rgba&lt;&#x2F;code&gt; will be converted to linear sRGB.&lt;&#x2F;li&gt;
&lt;li&gt;New methods &lt;code&gt;Color::rgb_linear&lt;&#x2F;code&gt; and &lt;code&gt;Color::rgba_linear&lt;&#x2F;code&gt; will accept colors already in linear sRGB (the old behavior)&lt;&#x2F;li&gt;
&lt;li&gt;Individual color-components must now be accessed through setters and getters.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;599&quot;&gt;&lt;code&gt;Mesh&lt;&#x2F;code&gt; overhaul with custom vertex attributes&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Any vertex attribute can now be added over &lt;code&gt;mesh.attributes.insert()&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;See &lt;code&gt;example&#x2F;shader&#x2F;mesh_custom_attribute.rs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Removed &lt;code&gt;VertexAttribute&lt;&#x2F;code&gt;, &lt;code&gt;Vertex&lt;&#x2F;code&gt;, &lt;code&gt;AsVertexBufferDescriptor&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For missing attributes (requested by shader, but not defined by mesh), Bevy will provide a zero-filled fallback buffer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Despawning an entity multiple times causes a debug-level log message to be emitted instead of a panic: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;649&quot;&gt;#649&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;651&quot;&gt;#651&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;692&quot;&gt;Migrated to Rodio 0.12&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;New method of playing audio can be found in the examples.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Added support for inserting custom initial values for &lt;code&gt;Local&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; system resources &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;745&quot;&gt;#745&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fixed&quot;&gt;Fixed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;560&quot;&gt;Properly update bind group ids when setting dynamic bindings&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;610&quot;&gt;Properly exit the app on AppExit event&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;618&quot;&gt;Fix FloatOrd hash being different for different NaN values&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;543&quot;&gt;Fix Added behavior for QueryOne get&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;488&quot;&gt;Update camera_system to fix issue with late camera addition&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;664&quot;&gt;Register &lt;code&gt;IndexFormat&lt;&#x2F;code&gt; as a property&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;685&quot;&gt;Fix breakout example bug&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;713&quot;&gt;Fix PreviousParent lag by merging parent update systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;730&quot;&gt;Fix bug of connection event of gamepad at startup&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;725&quot;&gt;Fix wavy text&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;&#x2F;h2&gt;
&lt;p&gt;A huge thanks to the &lt;strong&gt;59 contributors&lt;&#x2F;strong&gt; that made this release (and associated docs) possible!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;alec-deason&lt;&#x2F;li&gt;
&lt;li&gt;alexb910&lt;&#x2F;li&gt;
&lt;li&gt;andrewhickman&lt;&#x2F;li&gt;
&lt;li&gt;blunted2night&lt;&#x2F;li&gt;
&lt;li&gt;Bobox214&lt;&#x2F;li&gt;
&lt;li&gt;cart&lt;&#x2F;li&gt;
&lt;li&gt;CGMossa&lt;&#x2F;li&gt;
&lt;li&gt;CleanCut&lt;&#x2F;li&gt;
&lt;li&gt;ColdIce1605&lt;&#x2F;li&gt;
&lt;li&gt;Cupnfish&lt;&#x2F;li&gt;
&lt;li&gt;Dash-L&lt;&#x2F;li&gt;
&lt;li&gt;DJMcNab&lt;&#x2F;li&gt;
&lt;li&gt;EllenNyan&lt;&#x2F;li&gt;
&lt;li&gt;enfipy&lt;&#x2F;li&gt;
&lt;li&gt;EthanYidong&lt;&#x2F;li&gt;
&lt;li&gt;Gregoor&lt;&#x2F;li&gt;
&lt;li&gt;HyperLightKitsune&lt;&#x2F;li&gt;
&lt;li&gt;ian-h-chamberlain &lt;&#x2F;li&gt;
&lt;li&gt;J-F-Liu&lt;&#x2F;li&gt;
&lt;li&gt;Jerald&lt;&#x2F;li&gt;
&lt;li&gt;jngbsn&lt;&#x2F;li&gt;
&lt;li&gt;joshuajbouw&lt;&#x2F;li&gt;
&lt;li&gt;julhe&lt;&#x2F;li&gt;
&lt;li&gt;kedodrill&lt;&#x2F;li&gt;
&lt;li&gt;lberrymage&lt;&#x2F;li&gt;
&lt;li&gt;lee-orr&lt;&#x2F;li&gt;
&lt;li&gt;liufuyang&lt;&#x2F;li&gt;
&lt;li&gt;MarekLg&lt;&#x2F;li&gt;
&lt;li&gt;Mautar55&lt;&#x2F;li&gt;
&lt;li&gt;memoryruins&lt;&#x2F;li&gt;
&lt;li&gt;mjhostet&lt;&#x2F;li&gt;
&lt;li&gt;mockersf&lt;&#x2F;li&gt;
&lt;li&gt;MrEmanuel&lt;&#x2F;li&gt;
&lt;li&gt;mrk-its&lt;&#x2F;li&gt;
&lt;li&gt;mtsr&lt;&#x2F;li&gt;
&lt;li&gt;naithar&lt;&#x2F;li&gt;
&lt;li&gt;navaati&lt;&#x2F;li&gt;
&lt;li&gt;ndarilek&lt;&#x2F;li&gt;
&lt;li&gt;nic96&lt;&#x2F;li&gt;
&lt;li&gt;ocornoc&lt;&#x2F;li&gt;
&lt;li&gt;Olaren15&lt;&#x2F;li&gt;
&lt;li&gt;PrototypeNM1&lt;&#x2F;li&gt;
&lt;li&gt;Ratysz&lt;&#x2F;li&gt;
&lt;li&gt;Raymond26&lt;&#x2F;li&gt;
&lt;li&gt;robertwayne&lt;&#x2F;li&gt;
&lt;li&gt;simlay&lt;&#x2F;li&gt;
&lt;li&gt;simpuid&lt;&#x2F;li&gt;
&lt;li&gt;smokku&lt;&#x2F;li&gt;
&lt;li&gt;stjepang&lt;&#x2F;li&gt;
&lt;li&gt;SvenTS&lt;&#x2F;li&gt;
&lt;li&gt;sY9sE33&lt;&#x2F;li&gt;
&lt;li&gt;termhn&lt;&#x2F;li&gt;
&lt;li&gt;tigregalis&lt;&#x2F;li&gt;
&lt;li&gt;Vaelint&lt;&#x2F;li&gt;
&lt;li&gt;W4RH4WK&lt;&#x2F;li&gt;
&lt;li&gt;walterpie&lt;&#x2F;li&gt;
&lt;li&gt;will-hart&lt;&#x2F;li&gt;
&lt;li&gt;zgotsch&lt;&#x2F;li&gt;
&lt;li&gt;Zooce&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bevy 0.2</title>
		<published>2020-09-19T00:00:00+00:00</published>
		<updated>2020-09-19T00:00:00+00:00</updated>
		<link href="https://bevyengine.org/news/bevy-0-2/" type="text/html"/>
		<id>https://bevyengine.org/news/bevy-0-2/</id>
		<content type="html">&lt;p&gt;A month after the initial Bevy release, and thanks to &lt;strong&gt;87&lt;&#x2F;strong&gt; contributors, &lt;strong&gt;174&lt;&#x2F;strong&gt; pull requests, and our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;cart&quot;&gt;&lt;strong&gt;generous sponsors&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, I&#x27;m happy to announce the &lt;strong&gt;Bevy 0.2&lt;&#x2F;strong&gt; release on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bevy&quot;&gt;crates.io&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;For those who don&#x27;t know, Bevy is a refreshingly simple data-driven game engine built in Rust. You can check out &lt;a href=&quot;&#x2F;learn&#x2F;book&#x2F;getting-started&#x2F;&quot;&gt;Quick Start Guide&lt;&#x2F;a&gt; to get started. Bevy is also free and open source forever! You can grab the full &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&quot;&gt;source code&lt;&#x2F;a&gt; on GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the highlights from this release:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;async-task-system&quot;&gt;Async Task System&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @lachlansneff and @aclysma&lt;&#x2F;div&gt;
&lt;p&gt;Bevy uses multi-threading throughout the engine: ECS scheduling, asset loading, rendering, etc. Before this release it used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rayon-rs&#x2F;rayon&quot;&gt;Rayon&lt;&#x2F;a&gt; for almost all of these tasks. Rayon is nice because it is generally as simple as calling &lt;code&gt;some_list.par_iter().for_each(|x| do_something(x))&lt;&#x2F;code&gt;. Rayon then automatically breaks the &lt;code&gt;for_each&lt;&#x2F;code&gt; into tasks and runs them on as many cores as it can. Rayon is a great choice if you want to easily parallelize code, but it has the downside of being pretty cpu-hungry.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy (and a number of other rust game engines and ecs frameworks using rayon) have received feedback that they were overly cpu hungry &#x2F; usage was not proportional to &amp;quot;real&amp;quot; work done.&lt;&#x2F;p&gt;
&lt;p&gt;We decided to resolve this problem by building a custom async-friendly task system, which enables the creation of context-specific task pools. For example, you might have separate pools for compute, IO, networking, etc. This also gives us the flexibility to load balance work appropriately according to work type and&#x2F;or priority. The cpu usage wins have been huge:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;total-combined-percent-cpu-usage-8-core-machine-smaller-is-better&quot;&gt;Total Combined Percent CPU Usage - 8 Core Machine (smaller is better)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-2&#x2F;bevy_tasks_1.svg&quot; alt=&quot;threading cpu usage 8 core&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;total-combined-percent-cpu-usage-32-core-machine-smaller-is-better&quot;&gt;Total Combined Percent CPU Usage - 32 Core Machine (smaller is better)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-2&#x2F;bevy_tasks_2.svg&quot; alt=&quot;threading cpu usage 32 core&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-web-platform-support&quot;&gt;Initial Web Platform Support&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @smokku&lt;&#x2F;div&gt;
&lt;p&gt;(A subset of) Bevy now runs on the web using WebAssembly&#x2F;WASM! Specifically, Bevy apps can run Bevy ECS schedules, react to input events, create an empty canvas (using winit), and a few other things. This is a huge first step, but it is important to call out that there are still a number of missing pieces, such as 2D&#x2F;3D rendering, multi-threading, and sound. &lt;&#x2F;p&gt;
&lt;p&gt;Those limitations haven&#x27;t stopped @mrk-its from building the first WASM Bevy game!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bevy-robbo-playable-here&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mrk-its&#x2F;bevy-robbo&quot;&gt;bevy-robbo&lt;&#x2F;a&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;mrk.sed.pl&#x2F;bevy-robbo&#x2F;ascii&#x2F;&quot;&gt;playable here&lt;&#x2F;a&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-2&#x2F;bevy-robbo.png&quot; alt=&quot;bevy-robbo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;They use Bevy for game logic and cleverly work around the render limitations by passing ASCII art game state from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mrk-its&#x2F;bevy-robbo&#x2F;blob&#x2F;ascii&#x2F;src&#x2F;systems&#x2F;js_render.rs&quot;&gt;this Bevy system&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mrk-its&#x2F;bevy-robbo&#x2F;blob&#x2F;ascii&#x2F;wasm&#x2F;render.js&quot;&gt;this JavaScript function&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;You can play around with some Bevy WASM examples by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;tree&#x2F;v0.2.0&#x2F;examples#wasm&quot;&gt;following the instructions here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parallel-queries&quot;&gt;Parallel Queries&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @GrantMoyer&lt;&#x2F;div&gt;
&lt;p&gt;Bevy ECS Queries are a flexible way to retrieve data from the Entity Component System. Systems that &lt;em&gt;use&lt;&#x2F;em&gt; queries already run in parallel, but before this change the queries themselves could not be &lt;em&gt;iterated&lt;&#x2F;em&gt; in parallel. &lt;strong&gt;Bevy 0.2&lt;&#x2F;strong&gt; adds the ability to easily iterate queries in parallel:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ComputeTaskPool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;par_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;      transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
    });
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This provides a nice functional api (similar to Rayon) that runs on top of the new &lt;code&gt;bevy_tasks&lt;&#x2F;code&gt; system. It breaks the query up into 32 &amp;quot;batches&amp;quot; and runs each batch as a different task in the bevy task system. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;transform-system-rewrite&quot;&gt;Transform System Rewrite&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @MarekLg&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; old
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;translation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Translation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Rotation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Scale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;{} {} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; translation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; rotation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; scale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; new
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;{} {} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;translation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Bevy&#x27;s old transform system used separate &lt;code&gt;Translation&lt;&#x2F;code&gt;, &lt;code&gt;Rotation&lt;&#x2F;code&gt;, and &lt;code&gt;Scale&lt;&#x2F;code&gt; components as the &amp;quot;source of truth&amp;quot;. Users modified with these components in their systems, after which they were synced to a &lt;code&gt;LocalTransform&lt;&#x2F;code&gt; component, which was in turn synced to a global &lt;code&gt;Transform&lt;&#x2F;code&gt; component, taking hierarchy into account. This was nice for a couple of reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Slightly more cache efficient to retrieve individual components like &lt;code&gt;Translation&lt;&#x2F;code&gt; (because less data needs to be accessed)&lt;&#x2F;li&gt;
&lt;li&gt;Theoretically more parallel-friendly. Systems that only access &lt;code&gt;Translation&lt;&#x2F;code&gt; won&#x27;t block systems accessing &lt;code&gt;Rotation&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However this approach also has some pretty serious downsides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &amp;quot;individual components&amp;quot; are the source of truth, so &lt;code&gt;LocalTransform&lt;&#x2F;code&gt; is out of date when user systems are running. If an up to date &amp;quot;full transform&amp;quot; is needed, it must be manually constructed by accessing all three components.&lt;&#x2F;li&gt;
&lt;li&gt;Very hard to reason about. There are 5 components users need to think about and they all interact with each other differently.&lt;&#x2F;li&gt;
&lt;li&gt;Setting a Transform to a specific matrix value (ex: &lt;code&gt;Mat4::look_at()&lt;&#x2F;code&gt;) was extremely cumbersome, and the value would be immediately overwritten unless the user explicitly disabled component syncing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Given these issues, we decided to move to a single unified local-to-parent &lt;code&gt;Transform&lt;&#x2F;code&gt; component as the source of truth, and a computed &lt;code&gt;GlobalTransform&lt;&#x2F;code&gt; component for world-space transforms. We think this api will be much easier to use and to reason about. &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;joeante&#x2F;79d25ec3a0e86436e53eb74f3ac82c0c&quot;&gt;Unity is also considering a similar Transform rework for their ECS&lt;&#x2F;a&gt; and a lot of discussion on this topic happened in this &lt;a href=&quot;https:&#x2F;&#x2F;community.amethyst.rs&#x2F;t&#x2F;legion-transform-design-discussion&quot;&gt;Amethyst Forum Thread&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;joystick-gamepad-input&quot;&gt;Joystick&#x2F;Gamepad Input&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @simpuid&lt;&#x2F;div&gt;
&lt;p&gt;The Bevy Input plugin now has cross-platform support for most controllers thanks to the &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;gilrs-project&#x2F;gilrs&quot;&gt;gilrs&lt;&#x2F;a&gt; library!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;button_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;gamepads&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Gamepad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;button_input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;GamepadButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; gamepad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; gamepads&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; button_input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;just_pressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;GamepadButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;gamepad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;GamepadButtonType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RightTrigger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)) {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Pressed right trigger!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;bevy-ecs-performance-improvements&quot;&gt;Bevy ECS Performance Improvements&lt;&#x2F;h2&gt;
&lt;div class=&quot;release-feature-authors&quot;&gt;authors: @cart&lt;&#x2F;div&gt;
&lt;h3 id=&quot;generational-entity-ids&quot;&gt;Generational Entity IDs&lt;&#x2F;h3&gt;
&lt;p&gt;We changed Entity IDs from being random UUIDs to incrementing generational indices. Random UUIDs were nice because they could be created anywhere, were unique across game runs, and could be safely persisted to files or reused across networks. I was really hoping we could make them work, but they ended up being too slow relative to the alternatives. The randomness had a measurable cost and entity locations had to be looked up using a hash map.&lt;&#x2F;p&gt;
&lt;p&gt;By moving to generational indices (we use the hecs implementation), we can directly use entity ids as array indices, which makes entity location lookups lightning fast.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;read-only-queries&quot;&gt;Read Only Queries&lt;&#x2F;h3&gt;
&lt;p&gt;I implemented &amp;quot;read only&amp;quot; traits for queries that don&#x27;t mutate anything. This allows us to guarantee that a query won&#x27;t mutate anything.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;removed-locking-from-world-apis&quot;&gt;Removed locking from World apis&lt;&#x2F;h3&gt;
&lt;p&gt;This gives us a really nice speed boost. We can do this safely due to a combination of the new &amp;quot;read only queries&amp;quot; and changing World mutation apis to be a mutable World borrow.&lt;&#x2F;p&gt;
&lt;p&gt;This is not yet enabled for &lt;code&gt;Queries&lt;&#x2F;code&gt; in systems because a system could have multiple &lt;code&gt;Queries&lt;&#x2F;code&gt;, which could be simultaneously accessed in a way that doesn&#x27;t make mutable access unique. I think thats a solve-able problem, but it will take a bit more work. Fortunately &amp;quot;for-each&amp;quot; systems don&#x27;t have any collision risk, so we now use lock-less queries there.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;direct-component-lookup-in-nanoseconds-smaller-is-better&quot;&gt;Direct component lookup (in nanoseconds, smaller is better)&lt;&#x2F;h3&gt;
&lt;p&gt;As a result of these optimizations, direct component lookup is &lt;em&gt;much&lt;&#x2F;em&gt; faster than it used to be:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevy-0-2&#x2F;get_component.svg&quot; alt=&quot;get_component graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that this benchmark used &lt;code&gt;world.get::&amp;lt;T&amp;gt;(entity)&lt;&#x2F;code&gt;. &lt;code&gt;query.get::&amp;lt;T&amp;gt;(entity)&lt;&#x2F;code&gt; should have results similar to the &lt;code&gt;hecs&lt;&#x2F;code&gt; results because it still uses a lock. Eventually I&#x27;m hoping that we can remove locks from system queries too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;change-log&quot;&gt;Change Log&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;added&quot;&gt;Added&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;384&quot;&gt;Task System for Bevy&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Replaces rayon with a custom designed task system that consists of several &amp;quot;TaskPools&amp;quot;.&lt;&#x2F;li&gt;
&lt;li&gt;Exports &lt;code&gt;IOTaskPool&lt;&#x2F;code&gt;, &lt;code&gt;ComputePool&lt;&#x2F;code&gt;, and &lt;code&gt;AsyncComputePool&lt;&#x2F;code&gt; in &lt;code&gt;bevy_tasks&lt;&#x2F;code&gt; crate.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;292&quot;&gt;Parallel queries for distributing work over with the &lt;code&gt;ParallelIterator&lt;&#x2F;code&gt; trait.&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;query.iter().par_iter(batch_size).for_each(&#x2F;* ... *&#x2F;)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;280&quot;&gt;Added gamepad support using Gilrs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;503&quot;&gt;Implement WASM support for bevy_winit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;506&quot;&gt;Create winit canvas under WebAssembly&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;496&quot;&gt;Implement single threaded task scheduler for WebAssembly&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;271&quot;&gt;Support for binary glTF (.glb).&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;358&quot;&gt;Support for &lt;code&gt;Or&lt;&#x2F;code&gt; in ECS queries.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;339&quot;&gt;Added methods &lt;code&gt;unload()&lt;&#x2F;code&gt; and &lt;code&gt;unload_sync()&lt;&#x2F;code&gt; on &lt;code&gt;SceneSpawner&lt;&#x2F;code&gt; for unloading scenes.&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;145&quot;&gt;Custom rodio source for audio.&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AudioOuput&lt;&#x2F;code&gt; is now able to play anything &lt;code&gt;Decodable&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;362&quot;&gt;&lt;code&gt;Color::hex&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for creating &lt;code&gt;Color&lt;&#x2F;code&gt; from string hex values.
&lt;ul&gt;
&lt;li&gt;Accepts the forms RGB, RGBA, RRGGBB, and RRGGBBAA.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;381&quot;&gt;&lt;code&gt;Color::rgb_u8&lt;&#x2F;code&gt; and &lt;code&gt;Color::rgba_u8&lt;&#x2F;code&gt;.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;396&quot;&gt;Added &lt;code&gt;bevy_render::pass::ClearColor&lt;&#x2F;code&gt; to prelude.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;430&quot;&gt;&lt;code&gt;SpriteResizeMode&lt;&#x2F;code&gt; may choose how &lt;code&gt;Sprite&lt;&#x2F;code&gt; resizing should be handled. &lt;code&gt;Automatic&lt;&#x2F;code&gt; by default.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;428&quot;&gt;Added methods on &lt;code&gt;Input&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for iterator access to keys.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_pressed()&lt;&#x2F;code&gt;, &lt;code&gt;get_just_pressed()&lt;&#x2F;code&gt;, &lt;code&gt;get_just_released()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;270&quot;&gt;Derived &lt;code&gt;Copy&lt;&#x2F;code&gt; for &lt;code&gt;MouseScrollUnit&lt;&#x2F;code&gt;.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;390&quot;&gt;Derived &lt;code&gt;Clone&lt;&#x2F;code&gt; for UI component bundles.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;332&quot;&gt;Some examples of documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;451&quot;&gt;Update docs for Updated, Changed and Mutated&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Tips for faster builds on macOS: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;312&quot;&gt;#312&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;314&quot;&gt;#314&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;433&quot;&gt;#433&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Added and documented cargo features
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;249&quot;&gt;Created document &lt;code&gt;docs&#x2F;cargo_features.md&lt;&#x2F;code&gt;.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;249&quot;&gt;Added features for x11 and wayland display servers.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;363&quot;&gt;and added a feature to disable libloading.&lt;&#x2F;a&gt; (helpful for WASM support)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Added more instructions for Linux dependencies
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;275&quot;&gt;Arch &#x2F; Manjaro&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;290&quot;&gt;NixOS&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;463&quot;&gt;Ubuntu&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;331&quot;&gt;Solus&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;491&quot;&gt;Provide shell.nix for easier compiling with nix-shell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;505&quot;&gt;Add &lt;code&gt;AppBuilder::add_startup_stage_|before&#x2F;after&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;changed&quot;&gt;Changed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;374&quot;&gt;Transform rewrite&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;504&quot;&gt;Use generational entity ids and other optimizations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;417&quot;&gt;Optimize transform systems to only run on changes.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;323&quot;&gt;Send an AssetEvent when modifying using &lt;code&gt;get_id_mut&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;332&quot;&gt;Rename &lt;code&gt;Assets::get_id_mut&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;Assets::get_with_id_mut&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;183&quot;&gt;Support multiline text in &lt;code&gt;DrawableText&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;324&quot;&gt;iOS: use shaderc-rs for glsl to spirv compilation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;304&quot;&gt;Changed the default node size to Auto instead of Undefined to match the Stretch implementation.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;478&quot;&gt;Load assets from root path when loading directly&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;485&quot;&gt;Add &lt;code&gt;render&lt;&#x2F;code&gt; feature&lt;&#x2F;a&gt;, which makes the entire render pipeline optional.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fixed&quot;&gt;Fixed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;361&quot;&gt;Properly track added and removed RenderResources in RenderResourcesNode.&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Fixes issues where entities vanished or changed color when new entities were spawned&#x2F;despawned.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;385&quot;&gt;Fixed sprite clipping at same depth&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Transparent sprites should no longer clip.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;345&quot;&gt;Check asset path existence&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;376&quot;&gt;Fixed deadlock in hot asset reloading&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;394&quot;&gt;Fixed hot asset reloading on Windows&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;406&quot;&gt;Allow glTFs to be loaded that don&#x27;t have uvs and normals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;383&quot;&gt;Fixed archetypes_generation being incorrectly updated for systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;386&quot;&gt;Remove child from parent when it is despawned&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;444&quot;&gt;Initialize App.schedule systems when running the app&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;486&quot;&gt;Fix missing asset info path for synchronous loading&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;495&quot;&gt;fix font atlas overflow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;490&quot;&gt;do not assume font handle is present in assets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;internal-improvements&quot;&gt;Internal Improvements&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Many improvements to Bevy&#x27;s CI &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;325&quot;&gt;#325&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;349&quot;&gt;#349&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;357&quot;&gt;#357&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;373&quot;&gt;#373&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;423&quot;&gt;#423&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;&#x2F;h2&gt;
&lt;p&gt;A huge thanks to the &lt;strong&gt;87 contributors&lt;&#x2F;strong&gt; that made this release (and associated docs) possible!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;0x22fe&lt;&#x2F;li&gt;
&lt;li&gt;8bit-pudding&lt;&#x2F;li&gt;
&lt;li&gt;aarongeorge&lt;&#x2F;li&gt;
&lt;li&gt;ablakey&lt;&#x2F;li&gt;
&lt;li&gt;aclysma&lt;&#x2F;li&gt;
&lt;li&gt;adekau&lt;&#x2F;li&gt;
&lt;li&gt;aevyrie&lt;&#x2F;li&gt;
&lt;li&gt;AmionSky&lt;&#x2F;li&gt;
&lt;li&gt;andreheringer&lt;&#x2F;li&gt;
&lt;li&gt;AngelOnFira&lt;&#x2F;li&gt;
&lt;li&gt;ashneverdawn&lt;&#x2F;li&gt;
&lt;li&gt;BafDyce&lt;&#x2F;li&gt;
&lt;li&gt;BimDav&lt;&#x2F;li&gt;
&lt;li&gt;bitshifter&lt;&#x2F;li&gt;
&lt;li&gt;Bobox214&lt;&#x2F;li&gt;
&lt;li&gt;Boiethios&lt;&#x2F;li&gt;
&lt;li&gt;caelunshun&lt;&#x2F;li&gt;
&lt;li&gt;cart&lt;&#x2F;li&gt;
&lt;li&gt;CleanCut&lt;&#x2F;li&gt;
&lt;li&gt;dallenng&lt;&#x2F;li&gt;
&lt;li&gt;DGriffin91&lt;&#x2F;li&gt;
&lt;li&gt;Dispersia&lt;&#x2F;li&gt;
&lt;li&gt;DJMcNab&lt;&#x2F;li&gt;
&lt;li&gt;eliaspekkala&lt;&#x2F;li&gt;
&lt;li&gt;EllenNyan&lt;&#x2F;li&gt;
&lt;li&gt;eXodiquas&lt;&#x2F;li&gt;
&lt;li&gt;figsoda&lt;&#x2F;li&gt;
&lt;li&gt;Fishrock123&lt;&#x2F;li&gt;
&lt;li&gt;FSMaxB&lt;&#x2F;li&gt;
&lt;li&gt;GabLotus&lt;&#x2F;li&gt;
&lt;li&gt;GrantMoyer&lt;&#x2F;li&gt;
&lt;li&gt;guimcaballero&lt;&#x2F;li&gt;
&lt;li&gt;Halfwhit&lt;&#x2F;li&gt;
&lt;li&gt;hannobraun&lt;&#x2F;li&gt;
&lt;li&gt;IceSentry&lt;&#x2F;li&gt;
&lt;li&gt;ifletsomeclaire&lt;&#x2F;li&gt;
&lt;li&gt;Incipium&lt;&#x2F;li&gt;
&lt;li&gt;io12&lt;&#x2F;li&gt;
&lt;li&gt;jakerr&lt;&#x2F;li&gt;
&lt;li&gt;jamadazi&lt;&#x2F;li&gt;
&lt;li&gt;joejoepie&lt;&#x2F;li&gt;
&lt;li&gt;JohnDoneth&lt;&#x2F;li&gt;
&lt;li&gt;julhe&lt;&#x2F;li&gt;
&lt;li&gt;kaflu&lt;&#x2F;li&gt;
&lt;li&gt;karroffel&lt;&#x2F;li&gt;
&lt;li&gt;lachlansneff&lt;&#x2F;li&gt;
&lt;li&gt;lberrymage&lt;&#x2F;li&gt;
&lt;li&gt;logannc&lt;&#x2F;li&gt;
&lt;li&gt;Lowentwickler&lt;&#x2F;li&gt;
&lt;li&gt;MarekLg&lt;&#x2F;li&gt;
&lt;li&gt;MatteoGgl&lt;&#x2F;li&gt;
&lt;li&gt;memoryruins&lt;&#x2F;li&gt;
&lt;li&gt;mfrancis107&lt;&#x2F;li&gt;
&lt;li&gt;MGlolenstine&lt;&#x2F;li&gt;
&lt;li&gt;MichaelHills&lt;&#x2F;li&gt;
&lt;li&gt;MilanVasko&lt;&#x2F;li&gt;
&lt;li&gt;Moxinilian&lt;&#x2F;li&gt;
&lt;li&gt;mrk-its&lt;&#x2F;li&gt;
&lt;li&gt;mtsr&lt;&#x2F;li&gt;
&lt;li&gt;multun&lt;&#x2F;li&gt;
&lt;li&gt;naithar&lt;&#x2F;li&gt;
&lt;li&gt;ncallaway&lt;&#x2F;li&gt;
&lt;li&gt;ndarilek&lt;&#x2F;li&gt;
&lt;li&gt;OptimisticPeach&lt;&#x2F;li&gt;
&lt;li&gt;PrototypeNM1&lt;&#x2F;li&gt;
&lt;li&gt;reidbhuntley&lt;&#x2F;li&gt;
&lt;li&gt;RobDavenport&lt;&#x2F;li&gt;
&lt;li&gt;saicu&lt;&#x2F;li&gt;
&lt;li&gt;simpuid&lt;&#x2F;li&gt;
&lt;li&gt;SmiteWindows&lt;&#x2F;li&gt;
&lt;li&gt;smokku&lt;&#x2F;li&gt;
&lt;li&gt;StarArawn&lt;&#x2F;li&gt;
&lt;li&gt;stefee&lt;&#x2F;li&gt;
&lt;li&gt;tarkah&lt;&#x2F;li&gt;
&lt;li&gt;TehPers&lt;&#x2F;li&gt;
&lt;li&gt;Telzhaak&lt;&#x2F;li&gt;
&lt;li&gt;TheNeikos&lt;&#x2F;li&gt;
&lt;li&gt;thirdsgames&lt;&#x2F;li&gt;
&lt;li&gt;TomBebb&lt;&#x2F;li&gt;
&lt;li&gt;tristanpemble&lt;&#x2F;li&gt;
&lt;li&gt;verzuz&lt;&#x2F;li&gt;
&lt;li&gt;VitalyAnkh&lt;&#x2F;li&gt;
&lt;li&gt;w1th0utnam3&lt;&#x2F;li&gt;
&lt;li&gt;Waridley&lt;&#x2F;li&gt;
&lt;li&gt;wyhaya&lt;&#x2F;li&gt;
&lt;li&gt;Xavientois&lt;&#x2F;li&gt;
&lt;li&gt;zicklag&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Scaling Bevy</title>
		<published>2020-08-19T00:00:00+00:00</published>
		<updated>2020-08-19T00:00:00+00:00</updated>
		<link href="https://bevyengine.org/news/scaling-bevy/" type="text/html"/>
		<id>https://bevyengine.org/news/scaling-bevy/</id>
		<content type="html">&lt;p&gt;First, I want to take a moment to highlight just how wild the last week has been. &lt;a href=&quot;&#x2F;news&#x2F;introducing-bevy&quot;&gt;&lt;strong&gt;Bevy was only released a week ago&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and we&#x27;ve already hit some pretty major milestones:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;div style=&quot;display: flex; flex-wrap: wrap; width: 100%&quot;&gt;
    &lt;div style=&quot;max-width: 30rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt; 3rd most popular &#x2F;r&#x2F;rust post &lt;i&gt;of all time&lt;&#x2F;i&gt;&lt;&#x2F;h4&gt;
        &lt;img src=&quot;3rd_on_reddit.png&quot; style=&quot;display: block; height: 13rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 30rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt;#2 on Hacker News&lt;&#x2F;h4&gt;
        &lt;img src=&quot;2nd_on_hacker_news.png&quot; style=&quot;display: block; height: 10rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 20rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt;2,200 Github Stars&lt;&#x2F;h4&gt;
        &lt;img src=&quot;2_2k_stars.png&quot; style=&quot;display: block; height: 3rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 20rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt;26 contributors&lt;&#x2F;h4&gt;
        &lt;img src=&quot;contributors.png&quot; style=&quot;display: block; height: 8rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 20rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt;644 Discord Users&lt;&#x2F;h4&gt;
        &lt;img src=&quot;discord_users.png&quot; style=&quot;display: block; height: 6rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 21rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4 style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;cart&quot;&gt;37% of the way to making my full time Bevy development sustainable&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;cart&quot;&gt;&lt;img src=&quot;funding.png&quot; style=&quot;display: block; height: 6rem&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 35rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h3 style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;awesome-bevy&quot;&gt;A truly awesome number of community-developed plugins, games, and apps&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;awesome-bevy&quot;&gt;&lt;img src=&quot;awesome.png&quot; style=&quot;display: block; height: 20rem&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;how-can-bevy-operate-at-this-scale&quot;&gt;How can Bevy operate at this scale?&lt;&#x2F;h2&gt;
&lt;p&gt;I didn&#x27;t in my wildest dreams anticipate a community to show up so quickly and in such force. Clearly the Bevy project resonates with people! This is wonderful, but it also presents some interesting challenges that I thought I would have a lot more time to solve:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I am a bottleneck&lt;&#x2F;strong&gt;: Right now I am the only one with the right to merge code. This can&#x27;t change until people get ramped up and trust is built.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Everyone is fresh&lt;&#x2F;strong&gt;: Everyone is new to the codebase, so changes require a lot of scrutiny, and developers need a lot of guidance.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No structure&lt;&#x2F;strong&gt;: We don&#x27;t have an organization or a well-defined development process.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Before we try to solve these problems, I think we need to ask ourselves:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-made-bevy-good&quot;&gt;What made Bevy &amp;quot;good&amp;quot;?&lt;&#x2F;h3&gt;
&lt;p&gt;I think this is actually a relatively straightforward answer. I think it boils down to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Learn from the best&lt;&#x2F;strong&gt;: I thoroughly reviewed at all of the existing options, learned all I could from them, and either built something new based on those learnings or made iterative improvements&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Freedom to experiment&lt;&#x2F;strong&gt;: I was unencumbered by stability guarantees, pressure to make the &amp;quot;right&amp;quot; call every time, or deadlines&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Focus&lt;&#x2F;strong&gt;: I was able to work on Bevy full time with zero distractions for ~5 months&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;How can we replicate this process at the new scale of the Bevy community? And how can I personally replicate this now that my job title has changed from &amp;quot;solo incognito moonshot project architect&amp;quot; to &amp;quot;lead architect&amp;quot; &#x2F; &amp;quot;project manager&amp;quot; &#x2F; &amp;quot;community manager&amp;quot; of a project with a developer community numbering in the thousands?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-plan&quot;&gt;The Plan&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t think now is the time to get bogged down in complex organizational structures or RFC processes. Eventually we will need those tools, but I don&#x27;t think we&#x27;re there yet. Instead I&#x27;m going to try to re-create the conditions I&#x27;ve been operating under for the last five months:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bdfalaicmi&quot;&gt;BDFALAICMI&lt;&#x2F;h3&gt;
&lt;p&gt;I plan on being a &lt;strong&gt;B&lt;&#x2F;strong&gt;enevolent &lt;strong&gt;D&lt;&#x2F;strong&gt;ictator &lt;strong&gt;F&lt;&#x2F;strong&gt;or &lt;strong&gt;A&lt;&#x2F;strong&gt;s &lt;strong&gt;L&lt;&#x2F;strong&gt;ong &lt;strong&gt;A&lt;&#x2F;strong&gt;s &lt;strong&gt;I&lt;&#x2F;strong&gt; &lt;strong&gt;C&lt;&#x2F;strong&gt;an &lt;strong&gt;M&lt;&#x2F;strong&gt;anage &lt;strong&gt;I&lt;&#x2F;strong&gt;t. I will personally review every PR that gets merged and every design decision made. Eventually (if we do this right) that will become impossible, but we aren’t there yet. As I build trust in contributors and the project expands I will eventually start delegating. But I will always bias toward “small and focused”. My general skill-set and preference is to be a full time software developer &#x2F; architect, but I have accepted that I need to balance that with being a project and community manager. My short term goal will be to drive down our massive Issue and PR backlog :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;focus-focus-focus&quot;&gt;Focus Focus Focus&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;projects&#x2F;1&quot;&gt;We have a long road ahead of us&lt;&#x2F;a&gt;. Building an engine is a lot like leveling up a skill tree in a game. Some features can&#x27;t (or shouldn&#x27;t) be built until we have built their predecessors. An example of this is the Bevy Editor. Before we break ground on the editor, we need to make sure Bevy UI and Bevy Scenes are in a good spot. I am just one person. I have limited bandwidth to build designs and review proposals, so I can&#x27;t afford to waste energy on the editor yet.&lt;&#x2F;p&gt;
&lt;p&gt;At a given point in time, Bevy will have 3 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;labels&#x2F;focus-area&quot;&gt;focus areas&lt;&#x2F;a&gt;. These areas will receive priority for my time, and I will try my best to direct contributors to those areas. This doesn&#x27;t mean others aren&#x27;t free to explore other areas they are interested in. Just don&#x27;t expect to get them merged quickly. Ideally you&#x27;re building a standalone plugin that doesn&#x27;t require being directly merged into the Bevy repo anyway. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;fast-and-loose&quot;&gt;Fast and Loose&lt;&#x2F;h3&gt;
&lt;p&gt;I don&#x27;t want to get stuck in &amp;quot;design hell&amp;quot;. We can debate the best way to build a PBR renderer for years. But without implementations and hard data, it is very hard to determine what is &lt;em&gt;actually best in practice&lt;&#x2F;em&gt;. &lt;em&gt;I want to see code&lt;&#x2F;em&gt;. Production-readiness is a non-feature. A good idea is nice, but if there is no implementation it isn&#x27;t real to me. We need capable people to take good ideas and make them real. The faster we can try different approaches, the better. For now the general process will be:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Identify a focus area and communicate the general direction Bevy should be taking in this area&lt;&#x2F;li&gt;
&lt;li&gt;Encourage contributors to create their own &amp;quot;prototype&amp;quot; crates. In some cases I will create my own. The Bevy project will provide a centralized list of these crates, which will facilitate discover-ability and help consolidate efforts. If you make a crate, please use the &lt;code&gt;bevy_prototype_XXX&lt;&#x2F;code&gt; format for crate names to respect the &lt;code&gt;bevy_XXX&lt;&#x2F;code&gt; namespace. This approach will allow us to &amp;quot;scale out&amp;quot; without too much process or centralization.&lt;&#x2F;li&gt;
&lt;li&gt;Once we have working prototypes we can start to try building consensus. We can afford to take our time here. The prototype features will already be out there for the people that want them. The cost of merging something too early is high. Merging something is a signal that we have picked a path and are &lt;em&gt;committed to it&lt;&#x2F;em&gt;. At that point experimentation becomes costly and painful for Bevy crate consumers. For now I will have the final say on what gets merged and when it happens. It will be the job of the community to convince me to take a given path, but I promise I&#x27;m reasonable! And I will defer to subject matter experts when it makes sense.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;collaborate&quot;&gt;Collaborate&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy has caught the attention of many popular Rust projects. &lt;a href=&quot;https:&#x2F;&#x2F;community.amethyst.rs&#x2F;t&#x2F;bevy-engine-addressing-the-elephant-in-the-room&quot;&gt;We are currently discussing the best way to collaborate with Amethyst Engine&lt;&#x2F;a&gt;. I&#x27;m also talking to a number of other Rust project leads about the best way to make Bevy a good ecosystem player. As much as possible we should be building up common foundations. Please reach out to me (Twitter DMs or on Discord) if you know of potential collaboration areas. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;bevy-s-current-focus-areas&quot;&gt;Bevy&#x27;s Current Focus Areas&lt;&#x2F;h2&gt;
&lt;p&gt;Here are Bevy&#x27;s current focus areas. I will direct my attention and attempt to direct everyone elses&#x27; attention to them. There are no deadlines. We will take as long as we need to get them right. I will work as hard as I can (full-time) to ensure we make quick progress on them: &lt;&#x2F;p&gt;
&lt;h3 id=&quot;editor-ready-ui&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&#x2F;254&quot;&gt;Editor-Ready UI&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Before we can start work on the Bevy Editor, we need a solid UI implementation. Bevy UI already has nice &amp;quot;flexbox&amp;quot; layout, and we already have a first stab at buttons and interaction events. But Bevy UI still needs a lot more experimentation if we&#x27;re going to find the &amp;quot;right&amp;quot; patterns and paradigms. &lt;strong&gt;Editor-Ready UI&lt;&#x2F;strong&gt; has the following requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Embraces the Bevy architecture: Bevy ECS, Bevy Scenes, Bevy Assets, Bevy Events &lt;&#x2F;li&gt;
&lt;li&gt;A Canvas-style API for drawing widgets with shapes and anti-aliased curves&lt;&#x2F;li&gt;
&lt;li&gt;Define a consistent way to implement widgets&lt;&#x2F;li&gt;
&lt;li&gt;A core set of widgets: buttons, inputs, resizable panels, etc&lt;&#x2F;li&gt;
&lt;li&gt;Theme-ability&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;Interaction&amp;quot; and &amp;quot;focus&amp;quot; events&lt;&#x2F;li&gt;
&lt;li&gt;Translation-friendly. We can&#x27;t be anglo-centric here&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Suggesting other UI frameworks or stacks is out of scope. The Bevy Editor &lt;em&gt;will be&lt;&#x2F;em&gt; built on top of Bevy UI. See the &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;&quot;&gt;Introducing Bevy&lt;&#x2F;a&gt; blog post for my rationale. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;physically-based-rendering-pbr&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&#x2F;179&quot;&gt;Physically Based Rendering (PBR)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;PBR is a standard-ish way of rendering realistically in 3D. There is both a lot of interest and a lot of brain-power in this area, so it makes sense to build PBR now. This focus area has the following (minimum) requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PBR Shaders (which implies hdr)&lt;&#x2F;li&gt;
&lt;li&gt;Bloom (to convey hdr)&lt;&#x2F;li&gt;
&lt;li&gt;Shadowing (forces us to build out a real &amp;quot;pipeline&amp;quot;)&lt;&#x2F;li&gt;
&lt;li&gt;Battle-test the current mid-level rendering abstractions and rework them where necessary&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scenes&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&#x2F;255&quot;&gt;Scenes&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy Scenes currently do most of what we want, but they need a bit more work before they can be the foundation of Bevy state management. This focus area is also a requirement for the Bevy Editor.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Asset Management:&lt;&#x2F;strong&gt; Inline assets, asset dependencies, stable ids when loaded from the disk&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Better Scene Format:&lt;&#x2F;strong&gt; Improve the legibility and ergonomics of scene files to make them easy to read and easy to compose by hand. We&#x27;re shooting for something &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;cart&#x2F;3e77d6537e1a0979a69de5c6749b6bcb&quot;&gt;close to this&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Enabling&#x2F;Disabling Systems:&lt;&#x2F;strong&gt; Scenes should be able to toggle their required systems on and off when they are added &#x2F; removed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;want-to-help&quot;&gt;Want to help?&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to hop on this wild ride with us, here are a few ways you can help:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Contribute To Prototype Plugins&lt;&#x2F;strong&gt;: Start building new prototype Bevy plugins and contribute to the one&#x27;s others are working on. Ideally in the focus areas above. At this point we are looking for fast prototypes that demonstrate new ideas. If you want to get started on a project within a given focus area:
&lt;ul&gt;
&lt;li&gt;Read through the corresponding &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;labels&#x2F;focus-area&quot;&gt;focus-area&lt;&#x2F;a&gt; issue on GitHub&lt;&#x2F;li&gt;
&lt;li&gt;Look for current projects in that issue and find potential collaboration areas.&lt;&#x2F;li&gt;
&lt;li&gt;If you can&#x27;t find an existing project and you want to start one, set up a new crate&#x2F;repo and link to it in the &amp;quot;focus-area&amp;quot; issue. We will maintain an index of active projects at the top of the thread. We will also encourage collaboration when it looks like there are overly-redundant efforts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Assist the Bevy Community&lt;&#x2F;strong&gt;: If you are able, help us resolve issues on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&quot;&gt;Bevy Issue Tracker&lt;&#x2F;a&gt;, review &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pulls&quot;&gt;pull requests&lt;&#x2F;a&gt;, and provide help on the &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;channels&#x2F;691052431525675048&#x2F;742884593551802431&quot;&gt;#help channel of our Discord&lt;&#x2F;a&gt;. It is a real challenge to keep up with the sheer volume of work here, so any help is &lt;em&gt;very very&lt;&#x2F;em&gt; appreciated.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Help Me Make Full Time Development Sustainable&lt;&#x2F;strong&gt;: I need your help to make Bevy development sustainable! Five months ago I quit my comfortable Senior Software Engineer job at Microsoft to work on Bevy full time. I am currently paying my rent and living expenses out of pocket. I can&#x27;t sustain this for long, as much as I want to. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;cart&quot;&gt;We&#x27;re already 37% of the way to sustainable development&lt;&#x2F;a&gt; and it has only been two days!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I&#x27;m looking forward to seeing you in the &lt;a href=&quot;&#x2F;community&quot;&gt;Bevy Community&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introducing Bevy 0.1</title>
		<published>2020-08-10T00:00:00+00:00</published>
		<updated>2020-08-10T00:00:00+00:00</updated>
		<link href="https://bevyengine.org/news/introducing-bevy/" type="text/html"/>
		<id>https://bevyengine.org/news/introducing-bevy/</id>
		<content type="html">&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;hot_reloading.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After months of work, I am ecstatic to finally announce &lt;strong&gt;Bevy Engine&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Bevy is a refreshingly simple data-driven game engine and app framework built in Rust. It is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&quot;&gt;free and open-source&lt;&#x2F;a&gt; forever!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;It has the following design goals:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Capable&lt;&#x2F;b&gt;: Offer a complete 2D and 3D feature set&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Simple&lt;&#x2F;b&gt;: Easy for newbies to pick up, but infinitely flexible for power users&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Data Focused&lt;&#x2F;b&gt;: Data-oriented architecture using the Entity Component System paradigm &lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Modular&lt;&#x2F;b&gt;: Use only what you need. Replace what you don&#x27;t like&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Fast&lt;&#x2F;b&gt;: App logic should run quickly, and when possible, in parallel&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Productive&lt;&#x2F;b&gt;: Changes should compile quickly ... waiting isn&#x27;t fun&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Bevy has a number of features that I think set it apart from other engines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Bevy ECS&lt;&#x2F;b&gt;: A custom Entity Component System with unrivaled usability and blisteringly-fast performance&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Render Graphs&lt;&#x2F;b&gt;: Easily build your own multi-threaded render pipelines using Render Graph nodes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Bevy UI&lt;&#x2F;b&gt;: A custom ECS-driven UI framework built specifically for Bevy&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Productive Compile Times&lt;&#x2F;b&gt;: Expect changes to compile in ~0.8-3.0 seconds with the &amp;quot;fast compiles&amp;quot; config&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It also has many features most people expect from a modern, general purpose engine:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Cross Platform&lt;&#x2F;b&gt;: Windows, MacOS, and Linux (with planned support for mobile and web)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;3D&lt;&#x2F;b&gt;: Lights, meshes, textures, MSAA, and GLTF loading&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Sprites&lt;&#x2F;b&gt;: Render individual images as sprites, render from sprite sheets, and dynamically generate new sprite sheets&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Assets&lt;&#x2F;b&gt;: An extensible, event driven asset system that loads assets asynchronously in background threads&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Scenes&lt;&#x2F;b&gt;: Save ECS Worlds to human-readable scene files and load scene files into ECS Worlds&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Plugins&lt;&#x2F;b&gt;: All engine and app features are implemented as modular plugins&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Sound&lt;&#x2F;b&gt;: Load audio files as assets and play them from within systems&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Multiple Render Backends&lt;&#x2F;b&gt;: Vulkan, DirectX 12, and Metal (with more on the way thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu-rs&quot;&gt;wgpu&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Data Driven Shaders&lt;&#x2F;b&gt;: Easily bind ECS components directly to shader uniforms&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Hot Asset Reloading&lt;&#x2F;b&gt;: Automatically reload changes to assets at runtime without recompiles or restarts&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Events&lt;&#x2F;b&gt;: Efficiently consume and produce Events from within ECS systems&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Properties&lt;&#x2F;b&gt;: Dynamically get and set component fields using a string version of their names&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Hierarchical Transforms&lt;&#x2F;b&gt;: Create parent-child relationships between entities that propagate Transforms down the hierarchy &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That being said, Bevy is still in the very early stages. I consider it to be in the &amp;quot;prototyping&amp;quot; phase: features are missing, APIs will change, and documentation is sparse. &lt;span class=&quot;warning&quot;&gt;I don&#x27;t yet recommend using Bevy in serious projects unless you are willing to deal with gaps and instability&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully at this point you are either (1) jazzed about Bevy or (2) not reading anymore. If you want to dive in right now, &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;learn&#x2F;book&#x2F;introduction&#x2F;&quot;&gt;The Bevy Book&lt;&#x2F;a&gt; is the best place to get started. You can also keep reading to find out what the current state of Bevy is and where we&#x27;d like to take it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Quick note to the reader&lt;&#x2F;strong&gt;: in this article you will find text formatted like this: &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_render&amp;#x2F;0.1.0&amp;#x2F;bevy_render&amp;#x2F;texture&#x2F;struct.Texture.html&quot;&gt;&lt;code&gt;Texture&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This formatting indicates that the text is a Rust type that links to API documentation. I encourage you to click on anything that seems interesting to you!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bevy-apps&quot;&gt;Bevy Apps&lt;&#x2F;h2&gt;
&lt;p&gt;First, lets see what a Bevy App actually looks like. The simplest App looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;bevy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thats it! This App pulls in no features and literally does nothing. Running the program would just immediately terminate. We can make it a little more interesting by doing this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_default_plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy&amp;#x2F;0.1.0&amp;#x2F;bevy&#x2F;trait.AddDefaultPlugins.html#method.add_default_plugins&quot;&gt;&lt;code&gt;add_default_plugins()&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; adds all of the features you probably expect from a game engine: a 2D &#x2F; 3D renderer, asset loading, a UI system, windows, input, etc
&lt;p&gt;You can also register the default &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_app&amp;#x2F;0.1.0&amp;#x2F;bevy_app&#x2F;trait.Plugin.html&quot;&gt;&lt;code&gt;Plugins&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; manually like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;CorePlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;InputPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;WindowPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RenderPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;UiPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;* more plugins here ... omitted for brevity *&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And of course you can also create your own plugins. In fact, all engine and game logic is built using plugins. Hopefully now you understand what we mean by modular: you are free to add&#x2F;remove plugins based on your project&#x27;s unique needs. However I expect that most people will stick to &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy&amp;#x2F;0.1.0&amp;#x2F;bevy&#x2F;trait.AddDefaultPlugins.html#method.add_default_plugins&quot;&gt;&lt;code&gt;add_default_plugins()&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; for simplicity, at least initially.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bevy-ecs&quot;&gt;Bevy ECS&lt;&#x2F;h2&gt;
&lt;p&gt;All Bevy engine and game logic is built on top of a custom &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Entity_component_system&quot;&gt;Entity Component System&lt;&#x2F;a&gt; (or ECS for short). Entity Component Systems are a software paradigm that involves breaking data up into Components. Entities are unique ids assigned to groups of Components. For example, one entity might might have a &lt;code&gt;Position&lt;&#x2F;code&gt; and &lt;code&gt;Velocity&lt;&#x2F;code&gt; component, whereas another entity might have a &lt;code&gt;Position&lt;&#x2F;code&gt; and &lt;code&gt;UI&lt;&#x2F;code&gt; component. Systems are logic that runs on a specific set of component types. You might have a &lt;code&gt;movement&lt;&#x2F;code&gt; system that runs on all entities with a &lt;code&gt;Position&lt;&#x2F;code&gt; and &lt;code&gt;Velocity&lt;&#x2F;code&gt; component.&lt;&#x2F;p&gt;
&lt;p&gt;The ECS pattern encourages clean, decoupled designs by forcing you to break up your app data and logic into its core components.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike other Rust ECS implementations, which require complex lifetimes, traits, builder patterns, or macros, Bevy ECS uses normal Rust datatypes for all of these concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Components&lt;&#x2F;b&gt;: normal Rust structs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Systems&lt;&#x2F;b&gt;: normal Rust functions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Entities&lt;&#x2F;b&gt;: a type containing a unique integer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are already plenty of &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=2rW7ALyHaas&quot;&gt;great introductions&lt;&#x2F;a&gt; to the ECS paradigm, so I&#x27;ll leave &amp;quot;getting up to speed on ECS&amp;quot; as an exercise for the reader and skip right to what makes Bevy&#x27;s ECS so special:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ergonomics&quot;&gt;Ergonomics&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m going to make a wild (and unverifiable) claim here: Bevy ECS is the most ergonomic ECS &lt;em&gt;in existence&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;bevy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this system spawns entities with the Position and Velocity components
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    commands
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),))
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),));
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this system runs on each entity with a Position and Velocity component
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;movement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; the app entry point. hopefully you recognize it from the examples above!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_default_plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_startup_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;movement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is a complete self-contained Bevy app with automatic parallel system scheduling and global change detection. In my opinion, you &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;amethyst&#x2F;specs&#x2F;blob&#x2F;master&#x2F;examples&#x2F;basic.rs&quot;&gt;won&#x27;t&lt;&#x2F;a&gt; find &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TomGillen&#x2F;legion&quot;&gt;any&lt;&#x2F;a&gt; ECS &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;leudz&#x2F;shipyard&#x2F;blob&#x2F;master&#x2F;bunny_demo&#x2F;src&#x2F;systems.rs&quot;&gt;with&lt;&#x2F;a&gt; better &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Unity-Technologies&#x2F;EntityComponentSystemSamples&#x2F;tree&#x2F;master&#x2F;ECSSamples&#x2F;Assets&#x2F;HelloCube&quot;&gt;clarity&lt;&#x2F;a&gt; or ergonomics. Building games (and engines) involves writing a large number of systems, so I heavily invested in making ECS code easy to write &lt;em&gt;and&lt;&#x2F;em&gt; easy to read.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h3&gt;
&lt;p&gt;One of the reasons the ECS paradigm is so popular is that it has the potential to make game logic &lt;em&gt;super&lt;&#x2F;em&gt; fast, primarily for these two reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Iteration Speed&lt;&#x2F;b&gt;: Components are packed tightly together to optimize for cache-locality, which makes iterating over them blazing fast&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Parallelism&lt;&#x2F;b&gt;: Systems declare read&#x2F;write dependencies, which enables automatic and efficient lock-free parallel scheduling&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Bevy ECS does both of these things about as well as it can. According to the popular &lt;code&gt;ecs_bench&lt;&#x2F;code&gt; benchmark, Bevy ECS is the fastest Rust ECS by a pretty wide margin:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;system-iteration-in-nanoseconds-less-is-better&quot;&gt;System Iteration (in nanoseconds, less is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;ecs_iter.svg&quot; alt=&quot;ecs iter performance graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;world-setup-in-nanoseconds-less-is-better&quot;&gt;World Setup (in nanoseconds, less is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;ecs_build.svg&quot; alt=&quot;ecs iter performance graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that &lt;code&gt;ecs_bench&lt;&#x2F;code&gt; is a single threaded benchmark, so it doesn&#x27;t illustrate the multi-threading capabilities of these framework. And as always, please be aware that &lt;code&gt;ecs_bench&lt;&#x2F;code&gt; is a micro benchmark and it doesn&#x27;t illustrate the performance of a complex game. There is a lot of nuance in the ECS performance space and each of the ECS implementations above will perform differently under different workloads. &lt;&#x2F;p&gt;
&lt;p&gt;I have pushed my version of &lt;code&gt;ecs_bench&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cart&#x2F;ecs_bench&quot;&gt;here&lt;&#x2F;a&gt; if anyone wants to double-check my methodology. For some reasonable amount of time I will post updates here if anyone reports a problem or my results are not (on average) reproducible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;features&quot;&gt;Features&lt;&#x2F;h3&gt;
&lt;p&gt;Now you might be thinking &amp;quot;Ok @cart, so Bevy ECS has great performance and ergonomics, but &lt;em&gt;surely&lt;&#x2F;em&gt; this means you had to compromise on features!&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;... &lt;strong&gt;NOPE&lt;&#x2F;strong&gt; Bevy has you covered:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;for-each-systems&quot;&gt;For Each Systems&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; &amp;quot;for each systems&amp;quot; run once on each entity containing the given components
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;query-systems&quot;&gt;Query Systems&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this &amp;quot;query system&amp;quot; is the same as the system above, but gives you control over iteration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;change-detection&quot;&gt;Change Detection&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Added&amp;lt;T&amp;gt; queries only run when the given component has been added
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Added&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Mutated&amp;lt;T&amp;gt; queries only run when the given component has been mutated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mutated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Changed&amp;lt;T&amp;gt; queries only run when the given component has been added or mutated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Changed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; query.removed&amp;lt;T&amp;gt;() will iterate over every entity where the component T was removed this update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;removed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;multiple-queries&quot;&gt;Multiple Queries&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;wall_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Wall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;player_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; player &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; player_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; wall &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; wall_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;collides_with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;wall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;ouch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
            }
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;entity-queries-and-direct-component-access&quot;&gt;Entity Queries and Direct Component Access&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;entity_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;player_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; entity_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; player_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; the current entity has a player component
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Res and ResMut access global resources 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;score&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Score&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; you can use Resources in any system type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;local-system-resources&quot;&gt;&amp;quot;Local&amp;quot; System Resources&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Local&amp;lt;T&amp;gt; resources are unique per-system. Two instances of the same system will each have their own resource. Local resources are automatically initialized to their default value.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;empty-systems&quot;&gt;Empty Systems&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; for the hyper-minimalists
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;with-without-filters&quot;&gt;With&#x2F;Without Filters&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; only runs on entities With or Without a given component
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Without&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Parent, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;thread-local-systems&quot;&gt;Thread-Local Systems&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; systems that must run on the main thread with exclusive access to World and Resources
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; World, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;stages&quot;&gt;Stages&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; the scheduler provides Stages as a way to run sets of systems in order  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; adds a system to the default stage: &amp;quot;update&amp;quot; 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;movement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; creates a new stage after &amp;quot;update&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_stage_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;do_things&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system_to_stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;do_things&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; something&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;commands&quot;&gt;Commands&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; use Commands to queue up World and Resource changes, which will be applied at the end of the current Stage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)));
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Commands can also be used alongside other types
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;how-do-function-systems-work&quot;&gt;How Do Function Systems Work?&lt;&#x2F;h3&gt;
&lt;p&gt;Being able to use Rust functions directly as systems might feel like magic, but I promise it&#x27;s not! You may have noticed that we do this when registering systems in our App:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;some_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() { }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;some_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;.system()&lt;&#x2F;code&gt; call takes the &lt;code&gt;some_system&lt;&#x2F;code&gt; function pointer and converts it to a &lt;code&gt;Box&amp;lt;dyn System&amp;gt;&lt;&#x2F;code&gt;. This works because we implement the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.1.0&amp;#x2F;bevy_ecs&#x2F;trait.IntoQuerySystem.html&quot;&gt;&lt;code&gt;IntoQuerySystem&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; trait for all functions that match a certain set of function signatures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;good-bones&quot;&gt;Good Bones&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy ECS actually uses a heavily forked version of the minimalist &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ralith&#x2F;hecs&quot;&gt;Hecs ECS&lt;&#x2F;a&gt;. Hecs is an efficient single-threaded archetypal ECS. It provides the core &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.1.0&amp;#x2F;bevy_ecs&#x2F;struct.World.html&quot;&gt;&lt;code&gt;World&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.1.0&amp;#x2F;bevy_ecs&#x2F;struct.Archetype.html&quot;&gt;&lt;code&gt;Archetype&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;, and internal &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;0.1.0&amp;#x2F;bevy_ecs&#x2F;trait.Query.html&quot;&gt;&lt;code&gt;Query&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; data structures. Bevy ECS adds the following on top:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Function Systems&lt;&#x2F;b&gt;: Hecs actually has no concept of a &amp;quot;system&amp;quot; at all. You just run queries directly on the World. Bevy adds the ability to define portable, schedulable systems using normal Rust functions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Resources&lt;&#x2F;b&gt;: Hecs has no concept of unique&#x2F;global data. When building games, this is often needed. Bevy adds a &lt;code&gt;Resource&lt;&#x2F;code&gt; collection and resource queries&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Parallel Scheduler&lt;&#x2F;b&gt;: Hecs is single threaded, but it was designed to allow parallel schedulers to be built on top. Bevy ECS adds a custom dependency-aware scheduler that builds on top of the &amp;quot;Function Systems&amp;quot; mentioned above.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Optimization&lt;&#x2F;b&gt;: Hecs is already plenty fast, but by modifying some of its internal data access patterns, we were able to improve performance significantly. This moved it from &amp;quot;fast enough&amp;quot; to &amp;quot;the fastest&amp;quot; (see the benchmark above to compare Bevy ECS to vanilla Hecs).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Query Wrappers&lt;&#x2F;b&gt;: The &lt;code&gt;Query&lt;&#x2F;code&gt; Bevy ECS exports is actually a wrapper around Hecs Queries. It provides safe, scoped access to the &lt;code&gt;World&lt;&#x2F;code&gt; in a multi-threaded context and improves the ergonomics of iteration.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Change Detection&lt;&#x2F;b&gt;: Automatically (and efficiently) tracks component add&#x2F;remove&#x2F;update operations and exposes them in the Query interface.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Stable Entity IDs&lt;&#x2F;b&gt;: Almost every ECS (including Hecs) uses unstable entity ids that cannot be used for serialization (scenes &#x2F; save files) or networking. In Bevy ECS, entity ids are globally unique and stable. You can use them in any context!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the near future I will file an issue on the Hecs git repo offering to upstream whatever changes they want from Bevy ECS. I have a feeling they won&#x27;t want the &amp;quot;high level&amp;quot; stuff like function systems and parallel scheduling, but I guess we&#x27;ll see! &lt;&#x2F;p&gt;
&lt;h2 id=&quot;bevy-ui&quot;&gt;Bevy UI&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;bevy_ui.png&quot; alt=&quot;bevy ui&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Bevy has a custom, but familiar UI system based on the &amp;quot;flex box&amp;quot; model. Well... semi-custom, but more on that later. In the beginning, I heavily considered using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hecrj&#x2F;iced&quot;&gt;one&lt;&#x2F;a&gt; of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;emigui&#x2F;&quot;&gt;many&lt;&#x2F;a&gt; great &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;druid&quot;&gt;pre-made&lt;&#x2F;a&gt; UI solutions in the Rust ecosystem. But each of these frameworks felt in some way &amp;quot;separate&amp;quot; from the data-driven ECS approach at the core of Bevy. If we took a framework like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;druid&quot;&gt;Druid&lt;&#x2F;a&gt;, which is top-of-its class in terms of design, and then shoe-horned it into the Bevy data &#x2F; event model, that would &lt;em&gt;compromise&lt;&#x2F;em&gt; the Druid design and Bevy+Druid would end up being less compelling than just using Druid as a standalone framework.&lt;&#x2F;p&gt;
&lt;p&gt;I decided that the only way Bevy could even &lt;em&gt;hope&lt;&#x2F;em&gt; to bring something compelling to the table was to fully embrace the Bevy way of doing things.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy UI directly uses the existing ECS, hierarchy, transform, event, asset, and scene systems at the core of Bevy. Because of this, Bevy UI automatically gets features like hot-reloading of UI scene files, async texture loading, and change detection. A shared architecture means that improvements to any of these systems feed directly into Bevy UI. I am not yet convinced that this approach will produce the best UI framework, but I &lt;em&gt;am&lt;&#x2F;em&gt; convinced that it will produce the best UI framework in the context of a Bevy App.&lt;&#x2F;p&gt;
&lt;p&gt;We are still in the experimental stages and I expect some things to change, but the patterns we&#x27;ve found so far are very promising. Also keep in mind that currently the best way to compose Bevy UIs is with code, but we are in the process of designing a new file format for scenes that should make declarative, file based UI composition much nicer than it currently is.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-blocks&quot;&gt;Building Blocks&lt;&#x2F;h3&gt;
&lt;p&gt;In Bevy, a UI element is just an ECS Entity with a &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;0.1.0&amp;#x2F;bevy_ui&#x2F;struct.Node.html&quot;&gt;&lt;code&gt;Node&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component. Nodes are rectangles with a width and height, and are positioned using the same &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_transform&amp;#x2F;0.1.0&amp;#x2F;bevy_transform&amp;#x2F;components&#x2F;struct.Transform.html&quot;&gt;&lt;code&gt;Transform&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component used elsewhere in Bevy. The &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;0.1.0&amp;#x2F;bevy_ui&#x2F;struct.Style.html&quot;&gt;&lt;code&gt;Style&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component is used to determine how the Node is rendered, sized, and positioned.&lt;&#x2F;p&gt;
&lt;p&gt;The easiest way to add a new node (with all of the required components) is like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;0.1.0&amp;#x2F;bevy_ui&amp;#x2F;entity&#x2F;struct.NodeComponents.html&quot;&gt;&lt;code&gt;NodeComponents&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; is a &quot;component bundle&quot;, which Bevy uses to make spawning entities of various &quot;types&quot; easier.
&lt;h3 id=&quot;layout&quot;&gt;Layout&lt;&#x2F;h3&gt;
&lt;p&gt;For layout, Bevy uses a fantastic 100% Rust flexbox implementation called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vislyhq&#x2F;stretch&quot;&gt;Stretch&lt;&#x2F;a&gt;. Stretch provides the algorithms for positioning rectangles in 2D space according to the flexbox spec. Bevy exposes flex properties inside the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;0.1.0&amp;#x2F;bevy_ui&#x2F;struct.Style.html&quot;&gt;&lt;code&gt;Style&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component mentioned above and renders rectangles with the positions and sizes that Stretch outputs. Bevy uses its own z-layering algorithm to &amp;quot;stack&amp;quot; elements on top of each other, but its basically the same one that HTML&#x2F;CSS uses.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;relative-positioning&quot;&gt;Relative Positioning&lt;&#x2F;h3&gt;
&lt;p&gt;Nodes are positioned relative to each other by default:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;relative_position.png&quot; alt=&quot;relative positioning&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;40.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;40.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;absolute-positioning&quot;&gt;Absolute Positioning&lt;&#x2F;h3&gt;
&lt;p&gt;You can &amp;quot;absolutely&amp;quot; position a Node relative to its parent&#x27;s corners like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;absolute_positioning.png&quot; alt=&quot;absolute positioning&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;40.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;40.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            position_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PositionType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Absolute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Rect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            },
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;parenting&quot;&gt;Parenting&lt;&#x2F;h3&gt;
&lt;p&gt;Just like any other Entity, Nodes can have children. Children are positioned and scaled relative to their parent. By default, children will always appear in front of their parents.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;ui_parenting.png&quot; alt=&quot;ui_parenting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            position_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PositionType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Absolute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Rect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            },
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        parent
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                    size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;50.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;50.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
                    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
                },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            });
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;flexbox&quot;&gt;Flexbox&lt;&#x2F;h3&gt;
&lt;p&gt;I won&#x27;t cover how flexbox works here, but you can use all of the same &amp;quot;flex&amp;quot; properties you would use in a web context. Here is an example of how you would center two Nodes vertically and horizontally within their parent:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;flex.png&quot; alt=&quot;flex&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            justify_content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;JustifyContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            align_items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AlignItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        parent
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                    size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;80.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;80.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
                    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
                },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            })
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                    size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;80.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;80.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
                    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
                },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            });
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;text-and-images&quot;&gt;Text and Images&lt;&#x2F;h3&gt;
&lt;p&gt;Nodes can also have Text and Image components, which affect the inferred sizes of nodes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;text_and_image.png&quot; alt=&quot;text and images&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;TextComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Hello from Bevy UI!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            font&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;FiraSans-Bold.ttf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; TextStyle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                font_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;25.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;WHITE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
            },
        },
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ImageComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;200.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            position_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PositionType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Absolute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;            position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Rect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;                right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            },
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;bevy_logo.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;interaction-events&quot;&gt;Interaction Events&lt;&#x2F;h3&gt;
&lt;p&gt;Nodes with the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;0.1.0&amp;#x2F;bevy_ui&#x2F;enum.Interaction.html&quot;&gt;&lt;code&gt;Interaction&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component will track interaction state. You can easily build widgets like buttons this way:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;button.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For example, here is a system that only runs on Buttons where the Interaction state has changed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;_button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Button, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mutated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;interaction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Clicked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;clicked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Hovered &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;hovered&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;gt; {},
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;2d-features&quot;&gt;2D Features&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sprites&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;2d&#x2F;sprite.rs&quot;&gt;Sprites&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can use any &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_render&amp;#x2F;0.1.0&amp;#x2F;bevy_render&amp;#x2F;texture&#x2F;struct.Texture.html&quot;&gt;&lt;code&gt;Texture&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; asset as a sprite directly:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;sprite.png&quot; alt=&quot;sprite&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;icon.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SpriteComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;sprite-sheets&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;2d&#x2F;sprite_sheet.rs&quot;&gt;Sprite Sheets&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Sprite sheets (also known as texture atlases) can be used for animations, tile sets, or just for optimized sprite rendering.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;sprite_sheet.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;TextureAtlas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_grid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlases&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_atlas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SpriteSheetComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        texture_atlas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        sprite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;TextureAtlasSprite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;dynamic-texture-atlas-generation&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;2d&#x2F;texture_atlas.rs&quot;&gt;Dynamic Texture Atlas Generation&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Sprites are often produced as individual files. Bevy can combine them into a single sprite sheet dynamically!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;dynamic_texture_atlas.png&quot; alt=&quot;dynamic texture atlas&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; sprite_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; sprite_handles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    texture_atlas_builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas_builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;finish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;3d-features&quot;&gt;3D Features&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;gltf-model-loading&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;3d&#x2F;load_model.rs&quot;&gt;GLTF Model Loading&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Load GLTF files as Mesh assets &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;boat.png&quot; alt=&quot;boat render&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PbrComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; load the model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    mesh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;boat.gltf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; create a material for the model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;boat.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: in the near future we will add support for loading GLTF files as Scenes instead of meshes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;depth-based-draw-order&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;3d&#x2F;texture.rs&quot;&gt;Depth Based Draw Order&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Front-to-back drawing for fast &amp;quot;early fragment discarding&amp;quot; of opaque materials, and back-to-front drawing for correct transparent materials&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;alpha.png&quot; alt=&quot;alpha&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parenting-1&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;3d&#x2F;parenting.rs&quot;&gt;Parenting&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Parent transforms are propagated to their descendants&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;parenting.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PbrComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    mesh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; cube_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PbrComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        mesh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; cube_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;        translation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Translation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;msaa&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;3d&#x2F;msaa.rs&quot;&gt;MSAA&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Get nice smooth edges by using Multi-Sample Anti-Aliasing&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;msaa_off.png&quot; alt=&quot;msaa_off&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;msaa_on.png&quot; alt=&quot;msaa_on&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Msaa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; samples&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;scenes&quot;&gt;Scenes&lt;&#x2F;h2&gt;
&lt;p&gt;Scenes are a way to compose pieces of your game&#x2F;app ahead of time. In Bevy, Scenes are simply a collection of entities and components. A Scene can be &amp;quot;spawned&amp;quot; into a &lt;code&gt;World&lt;&#x2F;code&gt; any number of times. &amp;quot;Spawning&amp;quot; copies the Scene&#x27;s entities and components into the given &lt;code&gt;World&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Scenes can also be saved to and loaded from &amp;quot;scene files&amp;quot;. One of the primary goals of the future &amp;quot;Bevy Editor&amp;quot; will be to make it easy to compose scene files visually.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;file-format&quot;&gt;File Format&lt;&#x2F;h3&gt;
&lt;p&gt;Scene files are a saved and loaded as a flat list of entities and components:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;(
    entity: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;328997855&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;components: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[
      {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;},
      },
    ],
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;(
    entity: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;404566393&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;components: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[
      {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;},
      },
      {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Carter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot; },
      },
    ],
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The numbers assigned to the &lt;code&gt;entity&lt;&#x2F;code&gt; fields are entity&#x27;s id, which are completely optional. If no entity id is provided, one will be randomly generated when the scene is loaded. We have &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;cart&#x2F;3e77d6537e1a0979a69de5c6749b6bcb&quot;&gt;plans to improve this format&lt;&#x2F;a&gt; in the future to be more ergonomic, indent entity hierarchies, and support nested scenes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;loading-and-instancing&quot;&gt;Loading and Instancing&lt;&#x2F;h3&gt;
&lt;p&gt;Scenes can be added to a &lt;code&gt;World&lt;&#x2F;code&gt; using the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_scene&amp;#x2F;0.1.0&amp;#x2F;bevy_scene&#x2F;struct.SceneSpawner.html&quot;&gt;&lt;code&gt;SceneSpawner&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; resource. Spawning can be done with either &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_scene&amp;#x2F;0.1.0&amp;#x2F;bevy_scene&#x2F;struct.SceneSpawner.html#method.load&quot;&gt;&lt;code&gt;SceneSpawner::load()&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_scene&amp;#x2F;0.1.0&amp;#x2F;bevy_scene&#x2F;struct.SceneSpawner.html#method.instance&quot;&gt;&lt;code&gt;SceneSpawner::instance()&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;. &amp;quot;Loading&amp;quot; a Scene preserves the entity IDs in it. This is useful for something like a save file where you want entity ids to be constant and changes to be applied on top of entities already in the world. &amp;quot;Instancing&amp;quot; adds entities to the &lt;code&gt;World&lt;&#x2F;code&gt; with brand-new IDs, which allows multiple &amp;quot;instances&amp;quot; of a scene to exist in the same World.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load_scene_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;scene_spawner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SceneSpawner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Scenes are loaded just like any other asset.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;my_scene.scn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Spawns the scene with entity ids preserved
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    scene_spawner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Spawns the scene with new entity ids
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    scene_spawner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;saving-ecs-worlds-to-scenes&quot;&gt;Saving ECS Worlds To Scenes&lt;&#x2F;h3&gt;
&lt;p&gt;Any ECS &lt;code&gt;World&lt;&#x2F;code&gt; can be converted to a scene like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; scene &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;component_type_registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can then convert the scene to a RON formatted string like this: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; ron_string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;serialize_ron&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;property_type_registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)?;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;hot-scene-reloading&quot;&gt;Hot Scene Reloading&lt;&#x2F;h3&gt;
&lt;p&gt;Changes to Scene files can be automatically applied to spawned Scenes at runtime. This allows for immediate feedback without restarts or recompiles.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;hot_reloading.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that the video above is not sped up. Scene changes are effectively applied instantaneously.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-does-this-work&quot;&gt;How Does This Work?&lt;&#x2F;h3&gt;
&lt;p&gt;Scenes are built on top of Bevy&#x27;s Property and Asset systems. Components can be used in scenes provided they derive the &lt;code&gt;Properties&lt;&#x2F;code&gt; trait. Properties are what enable scene serialization, deserialization, and patching changes at runtime. Check out the next section for more details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;properties&quot;&gt;Properties&lt;&#x2F;h2&gt;
&lt;p&gt;In a nutshell, Bevy Properties add some dynamism to Rust, which is a notoriously static language. It is often useful to get or set a struct&#x27;s field using a string version of its name, or interact with a struct when you don&#x27;t have a statically typed reference. Languages generally cover these cases with &amp;quot;reflection&amp;quot; features, but unfortunately Rust does not currently have this type of reflection. I built the &lt;code&gt;bevy_property&lt;&#x2F;code&gt; crate to provide a subset of useful &amp;quot;reflection-like&amp;quot; features in Rust. Here is a quick surface-level introduction:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; You can set a property value like this. The type must match exactly or this will fail.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;set_prop_val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;prop_val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; You can also set properties dynamically. set_prop accepts any type that implements the Property trait, but the property type must match the field type or this operation will fail.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; new_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;set_prop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; DynamicProperties also implements the Properties trait, but it has no restrictions on field names or types
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; patch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;DynamicProperties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;patch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;set_prop_val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; You can &amp;quot;apply&amp;quot; Properties on top of other Properties. This will only set properties with the same name and type. You can use this to &amp;quot;patch&amp;quot; your properties with new values.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;patch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Types that implement Properties can be converted to DynamicProperties
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; dynamic_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; DynamicProperties &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_dynamic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Properties are what make Bevy&#x27;s Scene system so nice to use. I also plan to use them for features in the upcoming Bevy Editor, such as undo&#x2F;redo, viewing and editing component properties at runtime, and property animation tools.&lt;&#x2F;p&gt;
&lt;p&gt;Types that implement Properties can be serialized using &lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;&quot;&gt;serde&lt;&#x2F;a&gt; and &lt;code&gt;DynamicProperties&lt;&#x2F;code&gt; can be deserialized using serde. When combined with the &lt;code&gt;Properties&lt;&#x2F;code&gt; patching feature, this means any type that derives &lt;code&gt;Properties&lt;&#x2F;code&gt; can be round trip serialized and deserialized.&lt;&#x2F;p&gt;
&lt;p&gt;To derive &lt;code&gt;Properties&lt;&#x2F;code&gt; each field in the struct must implement the &lt;code&gt;Property&lt;&#x2F;code&gt; trait. This is already implemented for most core Rust and Bevy types, so you should only need to implement &lt;code&gt;Property&lt;&#x2F;code&gt; for custom types (and you can derive &lt;code&gt;Property&lt;&#x2F;code&gt; too).&lt;&#x2F;p&gt;
&lt;p&gt;I have a feeling that the &lt;code&gt;bevy_property&lt;&#x2F;code&gt; crate will be useful in non-Bevy contexts, so I&#x27;ll be publishing it to crates.io in the near future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;events&quot;&gt;Events&lt;&#x2F;h2&gt;
&lt;p&gt;Bevy uses a double-buffered event system that enables efficient event production and consumption with zero-allocation event consumers. Here is a complete Bevy app that produces and consumes a custom event:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;event_producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;event_consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;event_producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;my_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    my_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() });
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;EventReader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;event_consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;my_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;my_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;received message: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;app.add_event::&amp;lt;MyEvent&amp;gt;()&lt;&#x2F;code&gt; adds a new &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_app&amp;#x2F;0.1.0&amp;#x2F;bevy_app&#x2F;struct.Events.html&quot;&gt;&lt;code&gt;Events&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; resource for MyEvent and a system that swaps the &lt;code&gt;Events&amp;lt;MyEvent&amp;gt;&lt;&#x2F;code&gt; buffers every update.  &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_app&amp;#x2F;0.1.0&amp;#x2F;bevy_app&#x2F;struct.EventReader.html&quot;&gt;&lt;code&gt;EventReaders&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; are very cheap to create. They are essentially just an array index that tracks the last event that has been read.&lt;&#x2F;p&gt;
&lt;p&gt;Events are used in Bevy for features like window resizing, assets, and input. The tradeoff for being both allocation and cpu efficient is that each system only has one chance to receive an event, otherwise it will be lost on the next update. I believe this is the correct tradeoff for apps that run in a loop (ex: games).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;assets&quot;&gt;Assets&lt;&#x2F;h2&gt;
&lt;p&gt;Bevy &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_asset&amp;#x2F;0.1.0&amp;#x2F;bevy_asset&#x2F;struct.Assets.html&quot;&gt;&lt;code&gt;Assets&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; are just typed data that can be referenced using asset &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_asset&amp;#x2F;0.1.0&amp;#x2F;bevy_asset&#x2F;struct.Handle.html&quot;&gt;&lt;code&gt;Handles&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; . For example, 3d meshes, textures, fonts, materials, scenes, and sounds are assets. &lt;code&gt;Assets&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is a generic collection of assets of type &lt;code&gt;T&lt;&#x2F;code&gt;. In general asset usage looks like this:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;asset-creation&quot;&gt;Asset Creation&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;create_texture_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Assets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; creates a new Texture asset and returns a handle, which can then be used to retrieve the actual asset
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;asset-access&quot;&gt;Asset Access&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;read_texture_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Assets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; retrieves a Texture using the current entity&amp;#39;s Handle&amp;lt;Texture&amp;gt; component
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;asset-events&quot;&gt;Asset Events&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;Assets&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; collection is basically just a map from &lt;code&gt;Handle&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; to &lt;code&gt;T&lt;&#x2F;code&gt; that records created, modified, and removed &lt;code&gt;Events&lt;&#x2F;code&gt;. These events can also be consumed as a system resource, just like any other &lt;code&gt;Events&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;texture_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Created &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;} =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;* do something with created asset *&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;asset-server&quot;&gt;Asset Server&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;Assets&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; collection doesn&#x27;t know anything about filesystems or multi-threading. This is the responsibility of the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_asset&amp;#x2F;0.1.0&amp;#x2F;bevy_asset&#x2F;struct.AssetServer.html&quot;&gt;&lt;code&gt;AssetServer&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; resource:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Assets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this will begin asynchronously loading &amp;quot;texture.png&amp;quot; in parallel 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;texture.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; the texture may not be loaded yet, but you can still add the handle as a component immediately.
    &#x2F;&#x2F; whenever possible, internal Bevy systems will wait for assets to be ready before using them:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,));

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; you can also asynchronously load entire folders (recursively) by adding them as an &amp;quot;asset folder&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load_asset_folder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;assets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; you can get the handle of any asset (either currently loading or loaded) like this:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; music_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AudioSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;assets&#x2F;music.mp3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); 

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; when assets have finished loading, they are automatically added to the appropriate Assets&amp;lt;T&amp;gt; collection
    &#x2F;&#x2F; you can check if an asset is ready like this:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something with texture
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; sometimes you want access to an asset immediately. you can block the current system until an asset has
    &#x2F;&#x2F; finished loading and immediately update Assets&amp;lt;T&amp;gt; using the &amp;quot;load_sync&amp;quot; method
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; cool_sprite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;  asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load_sync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;assets&#x2F;cool_sprite.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;hot-reloading&quot;&gt;Hot Reloading&lt;&#x2F;h4&gt;
&lt;p&gt;You can enable asset change detection by calling:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;watch_for_changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will load new versions of assets whenever their files have changed.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;adding-new-asset-types&quot;&gt;Adding New Asset Types&lt;&#x2F;h4&gt;
&lt;p&gt;To add a new asset type, implement the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_asset&amp;#x2F;0.1.0&amp;#x2F;bevy_asset&#x2F;trait.AssetLoader.html&quot;&gt;&lt;code&gt;AssetLoader&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; trait. This tells Bevy what file formats to look for and how to translate the file bytes into the given asset type.&lt;&#x2F;p&gt;
&lt;p&gt;Once you have implemented &lt;code&gt;AssetLoader&amp;lt;MyAsset&amp;gt;&lt;&#x2F;code&gt; for &lt;code&gt;MyAssetLoader&lt;&#x2F;code&gt; you can register your new loader like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_asset_loader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyAsset, MyAssetLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then you can access the &lt;code&gt;Assets&amp;lt;MyAsset&amp;gt;&lt;&#x2F;code&gt; resource, listen for change events, and call &lt;code&gt;asset_server.load(&amp;quot;something.my_asset&amp;quot;)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sound&quot;&gt;Sound&lt;&#x2F;h2&gt;
&lt;p&gt;You can currently load and play sounds like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;audio_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AudioOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; music&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AudioSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;music.mp3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); 

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this will play the music asynchronously as soon as it has loaded
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    audio_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;play&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;music&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; if you already have an AudioSource reference you can play it immediately like this:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    audio_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;play_source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;audio_source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We plan on extending the audio system with more control and features in the future. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;render-graph&quot;&gt;Render Graph&lt;&#x2F;h2&gt;
&lt;p&gt;All render logic is built on top of Bevy&#x27;s &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_render&amp;#x2F;0.1.0&amp;#x2F;bevy_render&amp;#x2F;render_graph&#x2F;struct.RenderGraph.html&quot;&gt;&lt;code&gt;RenderGraph&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;. The Render Graph is a way to encode atomic units of render logic. For example, you might create graph nodes for a 2D pass, UI pass, cameras, texture copies, swap chains, etc. Connecting a node to another node indicates that there is a dependency of some kind between them. By encoding render logic this way, the Bevy renderer is able to analyze dependencies and render the graph in parallel. It also has the benefit of encouraging developers to write modular render logic.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy includes a number of nodes by default: &lt;code&gt;CameraNode&lt;&#x2F;code&gt;, &lt;code&gt;PassNode&lt;&#x2F;code&gt;, &lt;code&gt;RenderResourcesNode&lt;&#x2F;code&gt;, &lt;code&gt;SharedBuffersNode&lt;&#x2F;code&gt;, &lt;code&gt;TextureCopyNode&lt;&#x2F;code&gt;, &lt;code&gt;WindowSwapChainNode&lt;&#x2F;code&gt;, and &lt;code&gt;WindowTextureNode&lt;&#x2F;code&gt;. It also provides subgraphs for 2d rendering, 3d rendering, and UI rendering. But you are welcome to create your own nodes, your own graphs, or extend the included graphs!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-driven-shaders&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;shader&#x2F;shader_custom_material.rs&quot;&gt;Data Driven Shaders&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Components and Assets can derive the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_render&amp;#x2F;0.1.0&amp;#x2F;bevy_render&amp;#x2F;renderer&#x2F;trait.RenderResources.html&quot;&gt;&lt;code&gt;RenderResources&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; trait, which enables them to be directly copied to GPU resources and used as shader uniforms.&lt;&#x2F;p&gt;
&lt;p&gt;Binding uniforms to a custom shader is literally as simple as deriving &lt;code&gt;RenderResources&lt;&#x2F;code&gt; on your component or asset: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RenderResources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyMaterial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Color,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then adding a new RenderResourceNode to the Render Graph:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; create the new node
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;render_graph&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;my_material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RenderResourcesNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyMaterial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; connect the new node to the &amp;quot;main pass node&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;render_graph&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_node_edge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;my_material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MAIN_PASS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From there, MyMaterial components will be automatically copied to GPU buffers. A shader can then reference an entity&#x27;s MyMaterial like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;layout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt; binding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; uniform MyMaterial_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    vec4 color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think the simplicity of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;shader&#x2F;shader_custom_material.rs&quot;&gt;fully self-contained custom shader example&lt;&#x2F;a&gt; speaks for itself.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shader-defs&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;shader&#x2F;shader_defs.rs&quot;&gt;Shader Defs&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Components and Assets can also add &amp;quot;shader defs&amp;quot; to selectively enable shader code on a per-entity basis:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RenderResources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; ShaderDefs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyMaterial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Color,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;render_resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ignore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;shader_def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;always_blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in your fragment shader you could do something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    o_Target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;# ifdef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; MYMATERIAL_ALWAYS_BLUE
    o_Target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;# endif
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any entity with a &lt;code&gt;MyMaterial&lt;&#x2F;code&gt; component and &lt;code&gt;always_blue: true&lt;&#x2F;code&gt; will be rendered blue. If &lt;code&gt;always_blue&lt;&#x2F;code&gt; is false, it will be rendered with &lt;code&gt;color&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We currently use this feature for toggling &amp;quot;shadeless&amp;quot; rendering and optional textures, but I anticipate it being useful in a variety of contexts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shader-layout-reflection&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;shader&#x2F;shader_custom_material.rs&quot;&gt;Shader Layout Reflection&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy can automatically reflect shader data layouts from SpirV shaders (and from GLSL shaders by compiling them to SpirV). This means that creating custom shaders is as simple as this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; shader_stages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; ShaderStages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; shaders&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Shader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_glsl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ShaderStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;VERTEX_SHADER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    fragment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;shaders&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Shader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_glsl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ShaderStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Fragment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;FRAGMENT_SHADER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))),
};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; pipeline_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; pipelines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PipelineDescriptor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default_config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;shader_stages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;productive-compile-times&quot;&gt;Productive Compile Times&lt;&#x2F;h2&gt;
&lt;p&gt;One of my primary design goals for Bevy is &amp;quot;productivity&amp;quot;. Game development is an extremely iterative and experimental process full of small changes. If each change takes a significant amount of time to test, then development becomes a grind. Here is my personal &amp;quot;acceptability scale&amp;quot; for iterative changes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;0-1 seconds&lt;&#x2F;b&gt;: ideal&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;1-3 seconds&lt;&#x2F;b&gt;: fine&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;3-5 seconds&lt;&#x2F;b&gt;: annoying&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;5-10 seconds&lt;&#x2F;b&gt;: painful but still usable if you are committed&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;10+ seconds&lt;&#x2F;b&gt;: completely unusable&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that these are &amp;quot;iterative compile times&amp;quot; not &amp;quot;clean compile times&amp;quot;. Clean compiles only need to happen once, whereas iterative compiles happen constantly. I care a lot less about the &amp;quot;clean compile&amp;quot; metric when it comes to productivity, although it is still important to keep clean compile times down for other reasons.&lt;&#x2F;p&gt;
&lt;p&gt;One of the most popular Rust engines today takes &lt;em&gt;over 30 seconds&lt;&#x2F;em&gt; to compile a single newline inserted into trivial examples. That is categorically unproductive and makes real game-dev practically impossible.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, with the &amp;quot;fast compiles&amp;quot; configuration, changes to Bevy examples can be compiled in ~0.8-3 seconds, based on your computer specs, configuration, and OS choice (more on this later). There is of course always room for improvement here, but Bevy currently falls into my &amp;quot;usability sweet spot&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;The &amp;quot;Rust compiles slow&amp;quot; meme exists largely because many Rust projects aren&#x27;t thinking enough about the compile time performance implications of certain code patterns. Rust code generally compiles slowly for three reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Generic Monomorphization&lt;&#x2F;b&gt;: The compile step where generic code gets turned into a non-generic copy. Compile times go up as the volume of monomorphized code goes up. To keep costs low you should either avoid generics entirely or keep generic code &amp;quot;small&amp;quot; and shallow.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Link Time&lt;&#x2F;b&gt;: How long it takes to link code. Here the important thing is to keep code volume and dependency counts low.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;LLVM&lt;&#x2F;b&gt;: Rust throws a large amounts of IR code at LLVM and expects it to optimize it. This takes time. Additionally LLVM is optimized for &amp;quot;fast code at runtime&amp;quot; more than &amp;quot;fast code generation&amp;quot;. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The LLVM bit is out of our hands (for now). Keeping generic usage low and shallow isn&#x27;t a particularly hard problem, provided you employ that mindset from the beginning. Link times, on the other hand, are a constant and very real &amp;quot;enemy&amp;quot; of iterative compile times. Linking happens on every iterative compile. Adding any code to your project will increase link times. Adding any dependency to your project will increase link times.&lt;&#x2F;p&gt;
&lt;p&gt;The cards are stacked against us for a variety of reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;The Game Engine Domain&lt;&#x2F;b&gt;
&lt;ul&gt;
&lt;li&gt;Game engines inherently touch a large number of domains (and therefore involve a large number of dependencies)&lt;&#x2F;li&gt;
&lt;li&gt;Game engines are &amp;quot;big&amp;quot; ... they require a lot of code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Rust&#x27;s Design Choices&lt;&#x2F;b&gt;
&lt;ul&gt;
&lt;li&gt;Dependencies are statically linked by default, which means every new dependency adds link times &lt;&#x2F;li&gt;
&lt;li&gt;Rust&#x27;s default linker is quite slow&lt;&#x2F;li&gt;
&lt;li&gt;Cargo makes taking dependencies very easy. What appears to be a small, simple crate might actually have a large dependency tree&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One solution to this problem is to avoid dependencies at all costs and write the smallest amount of code that you can. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-fl3&#x2F;macroquad&quot;&gt;Macroquad&lt;&#x2F;a&gt; project is a great example of this. They employ a minimalist approach to code and avoid any dependency that doesn&#x27;t meet their strict compile time requirements. As a result, I think its fair to say that they are the fastest compiling (while still usable) Rust game engine, both for clean and iterative compiles. However their approach comes at the cost of dependency aversion.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy takes a slightly more pragmatic approach. First, being willing to take dependencies is good for the Rust ecosystem. I don&#x27;t want to ignore all of the great work that has already been done, especially when it comes to projects like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-windowing&#x2F;winit&quot;&gt;winit&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu-rs&quot;&gt;wgpu&lt;&#x2F;a&gt;. But we still strive to keep our dependency tree as small as we can. And any dependency that takes Bevy out of the &amp;quot;ideal to fine&amp;quot; iterative compile time range must either be pared down or removed. When combined with the &amp;quot;Fast Compiles&amp;quot; configuration, this results in nice compile times.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-fast-compiles-configuration&quot;&gt;The &amp;quot;Fast Compiles&amp;quot; Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;The &amp;quot;fast compiles&amp;quot; configuration is how we achieve usable iterative compile times while still taking dependencies. It consists of three parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;LLD linker&lt;&#x2F;b&gt;: LLD is &lt;em&gt;much faster&lt;&#x2F;em&gt; at linking than the default Rust linker. This is the biggest win.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Nightly Rust Compiler&lt;&#x2F;b&gt;: Gives access to the latest performance improvements and &amp;quot;unstable&amp;quot; optimizations. Note that Bevy can still be compiled on stable Rust if that is a requirement for you.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Generic Sharing&lt;&#x2F;b&gt;: Allows crates to share monomorphized generic code instead of duplicating it. In some cases this allows us to &amp;quot;precompile&amp;quot; generic code so it doesn&#x27;t affect iterative compiles.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To enable fast compiles, install the nightly rust compiler and LLD. Then copy &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;.cargo&#x2F;config_fast_builds&quot;&gt;this file&lt;&#x2F;a&gt; to &lt;code&gt;YOUR_WORKSPACE&#x2F;.cargo&#x2F;config&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;current-limitations-and-future-improvements&quot;&gt;Current Limitations and Future Improvements&lt;&#x2F;h3&gt;
&lt;p&gt;While Bevy is currently &amp;quot;productive&amp;quot; by my criteria, it isn&#x27;t all sunshine and rainbows yet. First, MacOS doesn&#x27;t have an up-to-date version of the LLD linker and therefore iterative compiles are &lt;em&gt;much&lt;&#x2F;em&gt; slower on that platform. Additionally, LLD is &lt;em&gt;slightly&lt;&#x2F;em&gt; slower on Windows than it is on Linux. On my machine I get ~1.5-3.0 seconds on Windows vs ~0.8-3.0 seconds on Linux.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dynamic-linking-to-the-rescue&quot;&gt;Dynamic Linking to the Rescue&lt;&#x2F;h4&gt;
&lt;p&gt;An easy way to cut down on link times is to just dynamically link instead. On my 2013 MacBook Pro running MacOS (with no LLD), I was able to drop iterative Bevy compile times from ~6 seconds to ~0.6 seconds by dynamically linking app plugins. Bevy actually already has support for dynamic App plugins, but the new Bevy ECS does not currently support dynamic linking because it relies on TypeIds (which are incompatible with dynamic linking). Fortunately, I have already solved the TypeId problem in other projects, so we should be able to add this back soon. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;cranelift-rustc-backend&quot;&gt;Cranelift Rustc Backend&lt;&#x2F;h4&gt;
&lt;p&gt;Cranelift is an alternative compiler backend that is optimized for fast compiles. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bjorn3&#x2F;rustc_codegen_cranelift&quot;&gt;rustc cranelift backend&lt;&#x2F;a&gt; is rapidly approaching a usable state. I&#x27;m hoping it will give us a nice boost eventually.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-game-breakout&quot;&gt;Example Game: Breakout&lt;&#x2F;h2&gt;
&lt;p&gt;If you are curious about what actual Bevy game code looks like, check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;1d68094f59b01e14f44ed7db8907dbd011b59973&#x2F;examples&#x2F;game&#x2F;breakout.rs&quot;&gt;breakout example&lt;&#x2F;a&gt;. Forgive my slightly janky collision code please :)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;breakout.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-build-bevy&quot;&gt;Why Build Bevy?&lt;&#x2F;h2&gt;
&lt;p&gt;There are plenty of fantastic engines out there ... why build another one? Especially when there are already so many in the Rust ecosystem?&lt;&#x2F;p&gt;
&lt;p&gt;First a bit about me: I decided to build Bevy after years of contributing code to other engines (ex: Godot). I spent over four years &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;cartdev&quot;&gt;building a game in Godot&lt;&#x2F;a&gt; and I also have experience with Unity, Unreal, and a number of other frameworks like SDL and Three.js. I have built multiple custom engines in the past using Rust, Go, HTML5, and Java. I have also used and&#x2F;or closely followed most of the current players in the Rust gamedev ecosystem. I recently quit my job as Senior Software Engineer at Microsoft and my experience there deeply affected my opinions of software and what it should be.&lt;&#x2F;p&gt;
&lt;p&gt;These experiences led me to want the following from a game engine:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Free and Open Source&lt;&#x2F;b&gt;: It needs to be free and open source with &lt;em&gt;no strings attached&lt;&#x2F;em&gt;. Games are a huge part of our culture and humanity is investing &lt;em&gt;millions&lt;&#x2F;em&gt; of hours into the development of games. Why are we (as game developers &#x2F; engine developers) continuing to build up the ecosystems of closed-source monopolies that take cuts of our sales and deny us visibility into the tech we use daily? As a community I believe we can do so much better. This criteria eliminates Unreal and Unity, despite their huge feature sets.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Productive&lt;&#x2F;b&gt;: It needs to have fast build&#x2F;run&#x2F;test loops, which translates to either scripting languages or fast compile times in native languages. But scripting languages introduce runtime overhead, cognitive load, and a barrier between me and the actual engine, so my preference here is a native language with fast compile times. Sadly compile times are a huge problem in the Rust ecosystem and many Rust engines have prohibitively long iterative compiles. Fortunately Rust game engines like Macroquad and coffee prove that productive iterative compile times are possible.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Turtles All The Way Down&lt;&#x2F;b&gt;: Ideally the engine is written in the same language that games are. Being able to run an IDE &amp;quot;go to definition&amp;quot; command on a symbol in your game and hop directly into the engine source is an extremely powerful concept. You also don&#x27;t need to worry about heavy language translation layers or lossy abstractions. If an engine&#x27;s community builds games in the same language as the engine, they are more likely (and able) to contribute back to the engine.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Simple&lt;&#x2F;b&gt;: It needs to be easy to use for common tasks, but it also can&#x27;t hide the details from you. Many engines are either &amp;quot;easy to use but too high level&amp;quot; or &amp;quot;very low level but difficult to do common tasks in&amp;quot;. Additionally, many engines in Rust are littered with lifetimes and generics. Both are powerful tools to be sure, but they also introduce cognitive load and reduce ergonomics. Generics can also have a huge impact on compile times if you aren&#x27;t careful.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Editor&lt;&#x2F;b&gt;: It needs to have an (optional) graphical editor. Scene creation is a large part of game development and in many cases visual editors beat code. As a bonus, the editor should be built &lt;em&gt;in the engine&lt;&#x2F;em&gt;. Godot uses this approach and it is &lt;em&gt;so smart&lt;&#x2F;em&gt;. Doing so &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Eating_your_own_dog_food&quot;&gt;dogfoods&lt;&#x2F;a&gt; the engine&#x27;s UI system and creates positive feedback loops. Improvements to the editor are also often improvements to the core engine. It also makes sure your engine is flexible enough to build tooling (and not just games). I personally consider building an engine&#x27;s editor in another stack to be a missed opportunity (ex: the web, QT, native widgets). &lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Data Driven&lt;&#x2F;b&gt;: It needs to be data-driven&#x2F;data-oriented&#x2F;data-first. ECS is a common way of doing this, but it definitely isn&#x27;t the only way. These paradigms can make your game faster (cache friendly, easier to parallelize), but they also make common tasks like game state serialization and synchronization delightfully straightforward.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;None of the engines on the market &lt;em&gt;quite&lt;&#x2F;em&gt; line up with what I&#x27;m looking for. And the changes required to make them meet my requirements are either massive in scope, impossible (closed source), or unwelcome (the things I want aren&#x27;t what the developers or customers want). On top of that, making new game engines is fun!&lt;&#x2F;p&gt;
&lt;p&gt;Bevy is not trying to out-compete other open-source game engines. As much as possible we should be collaborating and building common foundations. If you are an open source game engine developer and you think a Bevy component would make your engine better, one of your engine&#x27;s components could make Bevy better, or both, please reach out! Bevy is already benefitting massively from the efforts of the Rust gamedev ecosystem and we would love to pay it forward in whatever way we can.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next?&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m proud of how far Bevy has come in a relatively short period of time, but there is still plenty of work left to do. These will be our focus areas over the coming months:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;physically-based-rendering-pbr&quot;&gt;Physically Based Rendering (PBR)&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy&#x27;s current 3D renderer is extremely bare bones. As I primarily make 3D games, improving the 3D renderer is a priority for me. We will be adding PBR shaders, shadows, more lighting options, skeletal animation, improved GLTF import, ambient occlusion (implementation TBD), and probably a bunch of other things.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;editor&quot;&gt;Editor&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy was architected with a visual editor in mind. The Scene and Properties systems were specifically built to make game&amp;lt;-&amp;gt;editor dataflow nicer. The editor will be built as a Bevy App and will utilize the existing Bevy UI, Bevy ECS, Scene, and Properties features. I like the &amp;quot;build the editor in the engine&amp;quot; approach because improvements to the editor are often improvements to the engine, and vice-versa. Additionally, it ensures that Bevy is capable of building non-game apps and tooling.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;platform-support-android-ios-web&quot;&gt;Platform Support: Android, iOS, Web&lt;&#x2F;h3&gt;
&lt;p&gt;Under the hood Bevy uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-windowing&#x2F;winit&quot;&gt;winit&lt;&#x2F;a&gt; (for multi-platform windows and input) and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu-rs&quot;&gt;wgpu&lt;&#x2F;a&gt; (for multi-platform rendering). Each of these projects has varying degrees of support for the platforms above. And in general Bevy was designed to be platform-agnostic, so supporting the platforms above should be possible with a little bit of work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;render-batching-and-instancing&quot;&gt;Render Batching and Instancing&lt;&#x2F;h3&gt;
&lt;p&gt;Right now Bevy can render plenty fast for most use cases, but when it comes to rendering huge amounts of objects (tens of thousands) it isn&#x27;t quite there yet. To accomplish that, we need to implement batching &#x2F; instancing. These concepts can be defined in a number of ways, but the general gist is that we will be grouping as much geometry and data into the smallest number of draw calls possible, while also reducing GPU state changes as much as possible. I&#x27;m hoping Bevy&#x27;s data driven shader approach will make the instancing implementation simple and extensible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;canvas&quot;&gt;Canvas&lt;&#x2F;h3&gt;
&lt;p&gt;Right now the only way to draw UI and 2D scenes is via sprites and rectangles. Bevy needs an immediate-mode drawing api capable of drawing anti-aliased curves and shapes. This can then be used to do code-driven drawing of things like rounded corners in Bevy UI, performance graphs in the editor, etc. It&#x27;s very possible that we will integrate projects like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;servo&#x2F;pathfinder&quot;&gt;pathfinder&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nical&#x2F;lyon&quot;&gt;lyon&lt;&#x2F;a&gt; for this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;animation&quot;&gt;Animation&lt;&#x2F;h3&gt;
&lt;p&gt;Animation permeates almost everything in gamedev. First, I want to add a general purpose code-first animation system. Then on top of that we will add a property-based timeline system that can be saved to a config file and visualized &#x2F; edited in the Bevy Editor.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nicer-scene-format&quot;&gt;Nicer Scene Format&lt;&#x2F;h3&gt;
&lt;p&gt;The current scene format is workable, but it isn&#x27;t yet ideal for manual scene composition because it is a flat list of unordered entities. I also want to add nested scenes. Eventually, I would like the scene format to &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;cart&#x2F;3e77d6537e1a0979a69de5c6749b6bcb&quot;&gt;look something like this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dynamic-plugin-loading&quot;&gt;Dynamic Plugin Loading&lt;&#x2F;h3&gt;
&lt;p&gt;To mitigate the cost of compiling and linking plugins and make hot-code-reloading possible, we will provide the option to dynamically load App plugins. Bevy actually already supports this feature, but there is one hangup: Rust&#x27;s &lt;code&gt;TypeId&lt;&#x2F;code&gt;. TypeIds are unstable across binaries, which means &lt;code&gt;TypeId::of::&amp;lt;T&amp;gt;()&lt;&#x2F;code&gt; in the host binary will not match &lt;code&gt;TypeId::of::&amp;lt;T&amp;gt;()&lt;&#x2F;code&gt; in a dynamically loaded binary. Bevy ECS uses TypeIds, which means dynamically loaded ECS types won&#x27;t behave correctly. In the past, Bevy used a custom fork of the Legion ECS (where we fixed the TypeId problem). But since moving to Bevy ECS the problem has resurfaced. The fix is to apply the same approach we used in Legion to Bevy ECS. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;physics&quot;&gt;Physics&lt;&#x2F;h3&gt;
&lt;p&gt;Many games require collision detection and physics. I&#x27;m planning on building a plug-able physics interface with &lt;a href=&quot;https:&#x2F;&#x2F;nphysics.org&#x2F;&quot;&gt;nphysics &#x2F; ncollide&lt;&#x2F;a&gt; as the first backend.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;polish&quot;&gt;Polish&lt;&#x2F;h3&gt;
&lt;p&gt;There are plenty of areas that need more design work or features. For example, I think the core Render Graph is in a pretty good state, but the mid-level and high level rendering APIs need more time and experimentation. I also want to rethink how materials are composed. If you are curious about all of the improvements on our radar, check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&quot;&gt;Bevy issue tracker on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy&#x27;s APIs are still very unstable, so I haven&#x27;t spent much time documenting anything yet. &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;learn&#x2F;book&#x2F;introduction&#x2F;&quot;&gt;The Bevy Book&lt;&#x2F;a&gt; is still small and the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;bevy&quot;&gt;Rust API Docs&lt;&#x2F;a&gt; have plenty of gaps. In general I subscribe to the idea of &amp;quot;documentation proportional to stability&amp;quot;. As features stabilize and design patterns emerge, we will increase efforts in both of those areas.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;join-the-bevy&quot;&gt;Join the Bevy!&lt;&#x2F;h2&gt;
&lt;p&gt;If any of this sounds interesting to you, I encourage you to check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&quot;&gt;Bevy on GitHub&lt;&#x2F;a&gt;, read &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;learn&#x2F;book&#x2F;introduction&#x2F;&quot;&gt;The Bevy Book&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;community&#x2F;&quot;&gt;join the Bevy community&lt;&#x2F;a&gt;. Currently Bevy is 100% built by volunteers, so if you want to help us build the next great game engine, &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;invite&#x2F;gMUk5Ph&quot;&gt;please reach out&lt;&#x2F;a&gt;! We need all the help we can get, especially if you are a:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Software Developer&lt;&#x2F;b&gt;: check out the &lt;a href=&quot;&#x2F;learn&#x2F;book&#x2F;contributing&#x2F;code&quot;&gt;Contributing Code&lt;&#x2F;a&gt; section of The Bevy Book.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Technical Writer&lt;&#x2F;b&gt;: check out the &lt;a href=&quot;&#x2F;learn&#x2F;book&#x2F;contributing&#x2F;docs&quot;&gt;Contributing Docs&lt;&#x2F;a&gt; section of The Bevy Book.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I want Bevy to become a vibrant developer community ... thats actually why I chose the name! A Bevy is a group of birds, just like we are a group of game developers. Join the Bevy!&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;bevy_logo_dark.svg&quot; style=&quot;height: 4.0rem; margin-top: 2.0rem&quot; &#x2F;&gt;
</content>
	</entry>
</feed>
